<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20090527 20:03:54" type="library" name="SeleniumLibrary">
<version>2.2</version>
<doc>SeleniumLibrary is a web testing library for Robot Test Automation Framework. It uses the Selenium Remote Control tool internally to control a web browser. See http://selenium-rc.openqa.org/ for more information on Selenium tool.

SeleniumLibrary runs tests in a real browser instance. It should work in most modern browsers and can be used with both Python and Jython interpreters.

To test sites over HTTPS, special browser launchers *chrome and *iehta must be used. See `Open Browser` keyword for more details.

*Before running the tests*

Prior to running test cases using SeleniumLibrary, the Selenium server must be started. This can be done using keyword `Start Selenium Server` or from the command line by using command: `java -jar /path/to/selenium-server.jar`. The Selenium server is included in the SeleniumLibrary distribution and can be found under `[PythonLibs]/site-packages/SeleniumLibrary/lib`. Additionally, `Open Browser` keyword must be used in order to open browser in the desired location before any other keyword from the library may be used.

*Locating elements*

To do operations on elements, elements have to be identified. The most common way of doing this is by searching the values of key attributes of an element type. All keywords that operate on elements document the key attributes for that element type. If the given `locator` argument matches the value of any key attribute, the element is found.

It is also possible to give an arbitrary XPath or DOM expression as `locator`. In this case, the expression must be prefixed with either 'xpath=' or 'dom='

Examples:
| Click Link      | my link | # Mathces if either link text or value of attribute 'id', 'name' or 'href' equals 'my link' |
| Select Checkbox | xpath=//table[0]/input[name=my_checkbox] | # Using XPath |
| Click Image     | dom=document.images[56] | # Using a DOM expression |

*Handling page load events*

Some keywords that may cause a page to load take an additional argument `dont_wait` that is used to determine whether a new page is expected to load or not. By default, a page load is expected to happen whenever a link or image is clicked, or a form submitted. If a page load does not happen (if the link only executes some Javascript, for example), a non-empty value must be given to `dont_wait` argument.

There are also some keywords that may cause a page to load but by default we expect them not to. In these case, the keywords have an optional `wait` argument, and providing a non-empty value for it will cause the keyword to wait for a page load.

Examples:
| Click Link | link text    |            |          | # A page is expected to load. |
| Click Link | another link | don't wait |          | # A page is not expected to load. |
| Select Radio Button | group1 | value1  |          | # A page is not expected to load. |
| Select Radio Button | group2 | value2  | and wait | # A page is expected to load. |</doc>
<init>
<doc>SeleniumLibrary can be imported with optional arguments.

`timeout` is the default timeout used to wait for page load actions. It can be later set with `Set Timeout`

`host` and `port` are used to connect to Selenium server. Browsers opened with this SeleniumLibrary instance will be attached to that server. Note that the Selenium server must be running before `Open Browser`-keyword can be used. Selenium server can be started with keyword `Start Selenium Server`.</doc>
<arguments>
<arg>timeout=5.0</arg>
<arg>server_host=localhost</arg>
<arg>server_port=4444</arg>
</arguments>
</init>
<kw name="Alert Should Be Present">
<doc>Verifies an alert is present and dismisses it.

If `text` is a non-empty string, then it is also verified that the message of the alert equals to `text`.

Will fail if no alert is present. Note that when running tests with selenium, the alerts will not be visible in the browser. Nevertheless, following keywords will fail unless the alert is dismissed by this keyword or by `Get Alert Message`.</doc>
<arguments>
<arg>text=</arg>
</arguments>
</kw>
<kw name="Capture Screenshot">
<doc>Captures a screenshot and embeds it in Robot Framework log file.

Given path must be relative to Robot Framework output directory, otherwise the embedded image is not shown in the log file. If path is not given, file with name similar to 'selenium-image-x.png' is created directly under the output directory.</doc>
<arguments>
<arg>path=None</arg>
</arguments>
</kw>
<kw name="Checkbox Should Be Selected">
<doc>Verifies checkbox identified by `locator` is selected/checked.

Key attributes for checkboxes are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Checkbox Should Not Be Selected">
<doc>Verifies checkbox identified by `locator` is not selected/checked.

Key attributes for checkboxes are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Choose Cancel On Next Confirmation">
<doc>Cancel will be selected the next time `Confirm Action` is used.</doc>
<arguments>
</arguments>
</kw>
<kw name="Choose File">
<doc>Inputs the `file_path` into file input field found by `identifier`

`file_path` must be absolute and point to an existing file.

This keyword only works with *chrome browser launcher. See `Open Browser` for details.</doc>
<arguments>
<arg>identifier</arg>
<arg>file_path</arg>
</arguments>
</kw>
<kw name="Click Button">
<doc>Clicks a button identified by `locator`.

Key attributes for buttons are `id`, `name` and `value`. See `introduction` for details about locating elements and about meaning of `dont_wait` argument.</doc>
<arguments>
<arg>locator</arg>
<arg>dont_wait=</arg>
</arguments>
</kw>
<kw name="Click Element">
<doc>Click element identified by `locator`.

Key attributes for arbitrary elements are `id` and `name`. See `introduction` for details about locating elements and about meaning of `dont_wait` argument.</doc>
<arguments>
<arg>locator</arg>
<arg>dont_wait=</arg>
</arguments>
</kw>
<kw name="Click Image">
<doc>Clicks an image found by `locator`.

Key attributes for images are `id`, `src` and `alt`. See `introduction` for details about locating elements and about meaning of `dont_wait` argument.</doc>
<arguments>
<arg>locator</arg>
<arg>dont_wait=</arg>
</arguments>
</kw>
<kw name="Click Link">
<doc>Clicks a link identified by locator.

Key attributes for links are `id`, `name`, `href` and link text. See `introduction` for details about locating elements and about meaning of `dont_wait` argument.</doc>
<arguments>
<arg>locator</arg>
<arg>dont_wait=</arg>
</arguments>
</kw>
<kw name="Close All Browsers">
<doc>Closes all open browsers and empties the connection cache.

After this keyword new indexes get from Open Browser keyword are reset to 1.

This keyword should be used in test or suite teardown to make sure all browsers are closed.</doc>
<arguments>
</arguments>
</kw>
<kw name="Close Browser">
<doc>Closes the current browser.</doc>
<arguments>
</arguments>
</kw>
<kw name="Close Window">
<doc>Closes currently opened pop-up window.</doc>
<arguments>
</arguments>
</kw>
<kw name="Confirm Action">
<doc>Dismisses currently shown confirmation dialog.

By default, this keyword chooses 'Ok' option from the dialog. If 'cancel' needs to be chosen, keyword `Choose Cancel On Next Confirmation` must be called before the action that causes the confirmation dialog to be shown.

Examples:

| Click Button | Send | # Shows a confirmation dialog |
| Choose Confirm |    | # Chooses Ok |
|                |    |              |
| Choose Cancel On Next Confirmation | | |
| Click Button | Send | # Shows a confirmation dialog |
| Choose Confirm |    | # Chooses Cancel |</doc>
<arguments>
</arguments>
</kw>
<kw name="Current Frame Contains">
<doc>Verifies that current page contains `text`.</doc>
<arguments>
<arg>text</arg>
</arguments>
</kw>
<kw name="Current Frame Should Contain">
<doc>Verifies that current page contains `text`.</doc>
<arguments>
<arg>text</arg>
</arguments>
</kw>
<kw name="Delete All Cookies">
<doc>Deletes all cookies by calling `Delete Cookie` repeatedly.</doc>
<arguments>
</arguments>
</kw>
<kw name="Delete Cookie">
<doc>Deletes cookie matching `name` and `options`.

If the cookie is not found, nothing happens.

`options` is the options for the cookie as a string. Currently supported options include 'path', 'domain' and 'recurse.' Format for `options` is "path=/path/, domain=.foo.com, recurse=true". The order of options is irrelevant. Note that specifying a domain that isn't a subset of the current domain will usually fail. Setting `recurse=true` will cause this keyword to search all sub-domains of current domain with all paths that are subset of current path. This can take a long time.</doc>
<arguments>
<arg>name</arg>
<arg>options=</arg>
</arguments>
</kw>
<kw name="Element Should Contain">
<doc>Verifies element identified by `locator` contains text `expected`.

`message` can be used to override the default error message.

Key attributes for arbitrary elements are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>excepted</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Execute Javascript">
<doc>Executes the given javascript code.

`*code` may contain multiple statements and the return value of last statement is returned by this keyword.

`*code` may be divided in multiple cells in the test data. In that case, the parts are catenated as is with no white space added.

Note that, by default, the code will be executed in the context of the Selenium object itself, so 'this' will refer to the Selenium object. Use 'window' to refer to the window of your application, e.g. window.document.getElementById('foo')

Example:
| Execute Javascript | window.my_js_function('arg1', 'arg2') |</doc>
<arguments>
<arg>*code</arg>
</arguments>
</kw>
<kw name="Focus">
<doc>Sets focus to element identified by `locator`.

This is useful for instance to direct native keystrokes to particular element using `Press Key Native`.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Frame Should Contain">
<doc>Verifies frame identified by `locator` contains `text`.

Key attributes for frames are `id` and `name.` See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
</kw>
<kw name="Frame Should Contain Text">
<doc>Verifies frame identified by `locator` contains `text`.

Key attributes for frames are `id` and `name.` See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
</kw>
<kw name="Get Alert Message">
<doc>Returns the text of current javascript alert.

This keyword will fail if no alert is present. Note that when running tests with selenium, the alerts will not be visible in the browser. Nevertheless, following keywords will fail unless the alert is dismissed by this keyword or by `Alert Should Be Present`.</doc>
<arguments>
</arguments>
</kw>
<kw name="Get Cookie Value">
<doc>Returns value of cookie found with `name`.

If no cookie is found with `name`, this keyword fails.</doc>
<arguments>
<arg>name</arg>
</arguments>
</kw>
<kw name="Get Cookies">
<doc>Returns all cookies of the current page.</doc>
<arguments>
</arguments>
</kw>
<kw name="Get Location">
<doc>Returns the current location.</doc>
<arguments>
</arguments>
</kw>
<kw name="Get Source">
<doc>Returns the entire html source of the current page or frame.</doc>
<arguments>
</arguments>
</kw>
<kw name="Get Text">
<doc>Returns the text of element identified by `locator`.

See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Get Title">
<doc>Returns title of current page.</doc>
<arguments>
</arguments>
</kw>
<kw name="Get Value">
<doc>Returns the value attribute of element identified by `locator`.

See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Go To">
<doc>Navigates the active browser instance to the provided URL.</doc>
<arguments>
<arg>url</arg>
</arguments>
</kw>
<kw name="Input Password">
<doc>Types the given password into text field identified by `locator`.

Difference between this keyword and `Input Text` is that this keyword does not log the given password. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
</kw>
<kw name="Input Text">
<doc>Types the given `text` into text field identified by `locator`.

See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
</kw>
<kw name="List Selection Should Be">
<doc>Verifies the selection of list identified by `locator` is exactly `*values`.

If you want to test that no option is selected, simply give no `values`. Key attributes for list are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>*values</arg>
</arguments>
</kw>
<kw name="List Should Have No Selections">
<doc>Verifies list idenetified by `locator` has no selections.

Key attributes for list are `id` and `name`. See `introduction` for more details on key attributes and locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Location Should Be">
<doc>Verifies that current URL is exactly `url`.</doc>
<arguments>
<arg>url</arg>
</arguments>
</kw>
<kw name="Location Should Contain">
<doc>Verifies that current URL contains `expected`.</doc>
<arguments>
<arg>expected</arg>
</arguments>
</kw>
<kw name="Log Source">
<doc>Logs and returns the entire html source of the current page or frame</doc>
<arguments>
</arguments>
</kw>
<kw name="Mouse Down On Image">
<doc>Simulates a mouse down event on an image.

Key attributes for images are `id`, `src` and `alt`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Mouse Down On Link">
<doc>Simulates a mouse down event on a link.

Key attributes for links are `id`, `name`, `href` and link text. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Open Browser">
<doc>Opens a new browser instance to given url.

Possible already opened connections are cached.

Returns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when `Close All Browsers` keyword is used. See `Switch Browser` for example.

Optional alias is a alias for the browser instance and it can be used for switching between browsers similarly as the index. See `Switch Browser` for more details about that.

Possible values for `browser` are all the values supported by Selenium. Additionally, following table lists case and space insensitive aliases that can be used:

| *Alias*          | *Browser* |
| firefox          | Firefox   |
| ff               | Firefox   |
| ie               | Internet Explorer |
| internetexplorer | Internet Explorer |

There are also experimental browser launchers *chrome and *iehta, for Firefox and Internet Explorer, respectively. These browser launchers are automatically used when the given base url startswith 'https'. These launchers should also be used when text has to be inserted in a file upload dialog with keyword `Choose File`.</doc>
<arguments>
<arg>url</arg>
<arg>browser=firefox</arg>
<arg>alias=None</arg>
</arguments>
</kw>
<kw name="Page Should Contain">
<doc>Verifies that current page contains `text`.</doc>
<arguments>
<arg>text</arg>
</arguments>
</kw>
<kw name="Page Should Contain Button">
<doc>Verifies button identified by `locator` is found from current page.

`message` can be used to override default error message.

Key attributes for buttons are `id`, `name` and `value`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Contain Checkbox">
<doc>Verifies checkbox identified by `locator` is found from current page.

`message` can be used to override default error message.

Key attributes for checkboxes are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Contain Element">
<doc>Verifies element identified by `locator` is found from current page.

`message` can be used to override default error message.

Key attributes for arbitrary elements are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Contain Image">
<doc>Verifies image identified by `locator` is found from current page.

`message` can be used to override default error message.

Key attributes for images are `id`, `src` and `alt`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Contain Link">
<doc>Verifies link identified by `locator` is found from current page.

`message` can be used to override default error message.

Key attributes for links are `id`, `name`, `href` and link text. See `introduction` for details about locating elemself._info("Verifying current location is '%s'." % url)ents.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Contain List">
<doc>Verifies list identified by `locator` is found from current page.

`message` can be used to override default error message.

Key attributes for lists are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Contain Radio Button">
<doc>Verifies radio button identified by `locator` is found from current page.

`message` can be used to override default error message.

Key attributes for radio buttons are `id`, `name` and `value`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Contain Textfield">
<doc>Verifies text field identified by `locator` is found from current page.

`message` can be used to override default error message.

Key attributes for text fields are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain">
<doc>Verifies the current page does not contain `text`.</doc>
<arguments>
<arg>text</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain Button">
<doc>Verifies button identified by `locator` is not found from current page.

`message` can be used to override default error message.

Key attributes for buttons are `id`, `name` and `value`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain Checkbox">
<doc>Verifies checkbox identified by `locator` is not found from current page.

`message` can be used to override default error message.

Key attributes for checkboxes are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain Element">
<doc>Verifies element identified by `locator` is not found from current page.

`message` can be used to override default error message.

Key attributes for arbitrary elements are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain Image">
<doc>Verifies image identified by `locator` is not found from current page.

`message` can be used to override default error message.

Key attributes for images are `id`, `src` and `alt`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain Link">
<doc>Verifies link identified by `locator` is not found from current page.

`message` can be used to override default error message.

Key attributes for links are `id`, `name`, `href` and link text. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain List">
<doc>Verifies list identified by `locator` is not found from current page.

`message` can be used to override default error message.

Key attributes for lists are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain Radio Button">
<doc>Verifies radio button identified by `locator` is not found from current page.

`message` can be used to override default error message.

Key attributes for radio buttons are `id`, `name` and `value`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Page Should Not Contain Textfield">
<doc>Verifies text field identified by `locator` is not found from current page.

`message` can be used to override default error message.

Key attributes for text fields are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Press Key">
<doc>Simulates user pressing key on element identified by `locator`.

`key` is either a single character, or numerical ASCII code of the key lead by '\'.

See `introduction` for details about `wait` argument.

Examples:
| Press Key | text_field   | q |
| Press Key | login_button | \13 | # ASCII code for enter key |</doc>
<arguments>
<arg>locator</arg>
<arg>key</arg>
<arg>wait=</arg>
</arguments>
</kw>
<kw name="Press Key Native">
<doc>Simulates user pressing key by sending an operating system keystroke.

`keycode` corresponds to `java.awt.event.KeyEvent` constants, which can be found from http://java.sun.com/javase/6/docs/api/constant-values.html#java.awt.event.KeyEvent.CHAR_UNDEFINED

The key press does not target a particular element. An element can be chosen by first using `Focus` -keyword.

See `introduction` for details about `wait` argument.

Examples:
| Press Key Native | 517          | # Exclamation mark |
| Focus            | login_button |
| Press Key Native | 10           | # Enter key  |</doc>
<arguments>
<arg>keycode</arg>
<arg>wait=</arg>
</arguments>
</kw>
<kw name="Radio Button Should Be Set To">
<doc>Verifies radio button group identified by `group_name` has its selection set to `value`.</doc>
<arguments>
<arg>group_name</arg>
<arg>value</arg>
</arguments>
</kw>
<kw name="Radio Button Should Not Be Selected">
<doc>Verifies radio button group identified by `group_name` has no selection.</doc>
<arguments>
<arg>group_name</arg>
</arguments>
</kw>
<kw name="Select All From List">
<doc>Selects all values from multi-select list identified by `id`.

Key attributes for list are `id` and `name`. See `introduction` for details about locating elements and about `wait` argument.</doc>
<arguments>
<arg>locator</arg>
<arg>wait=</arg>
</arguments>
</kw>
<kw name="Select Checkbox">
<doc>Selects checkbox identified by `locator`.

Does nothing if checkbox is already selected. Key attributes for checkboxes are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Select Frame">
<doc>Sets frame identified by `locator` as current frame.

Key attributes for frames are `id` and `name.` See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Select From List">
<doc>Selects `*values` from list identified by `locator`

If more than one value is given for a single-selection list, the last value will be selected. If the target list is a multi-selection list, and `*values` is an empty list, all values of the list will be selected.

Key attributes for list are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>*values</arg>
</arguments>
</kw>
<kw name="Select Radio Button">
<doc>Sets selection of radio button group identified by `group_name` to `value`.

See `introduction` for details about `wait` argument.</doc>
<arguments>
<arg>group_name</arg>
<arg>value</arg>
<arg>wait=</arg>
</arguments>
</kw>
<kw name="Select Window">
<doc>Selects the window found with `windowID` as the context of actions.

If the window is found, all subsequent commands use that window, until this keyword is used again. If the window is not found, this keyword fails.

`windowID` may be either the title of the window or the name of the window in the javascript code that creates it. Name is second argument passed to javascript function window.open(). In case of multiple windows with same identifier are found, the first one is selected.

To select main window, the argument can be left empty, or name 'main' can be used.

Example:
| Click Link | popup_link | don't wait | # opens new window |
| Select Window | popupName |
| Title Should Be | Popup Title |
| Select Window |  | | # Chooses the main window again |</doc>
<arguments>
<arg>windowID=None</arg>
</arguments>
</kw>
<kw name="Set Selenium Speed">
<doc>Sets the delay that is waited after each Selenium command.

This is useful mainly in slowing down the test execution to be able to view the execution.  `seconds` may be given in Robot Framework time format.  Returns the previous speed value.

Example:
| Set Selenium Speed | 2 seconds |</doc>
<arguments>
<arg>seconds</arg>
</arguments>
</kw>
<kw name="Set Selenium Timeout">
<doc>Sets the timeout used by various keywords.

The keywords that expect a page load to happen will fail if the page does not load within the time specified with `seconds`.  `seconds` may be given in Robot Framework time format and the default value is 5 seconds. Returns the previous timeout value.</doc>
<arguments>
<arg>seconds</arg>
</arguments>
</kw>
<kw name="Shut Down Selenium Server">
<doc>Shuts down the selenium server (and all browsers).</doc>
<arguments>
</arguments>
</kw>
<kw name="Shut Down Server">
<doc>*DEPRECATED* Use `Shut Down Selenium Server` instead.</doc>
<arguments>
</arguments>
</kw>
<kw name="Simulate">
<doc>Simulates `event` on component identified by `locator`.

This keyword is useful if component has OnEvent handler that needs to be explicitly invoked.

See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>event</arg>
</arguments>
</kw>
<kw name="Start Selenium Server">
<doc>Starts the selenium server provided with Selenium Library.

Server will use the default host and port, ie. `localhost:4444`. Additionally, all Selenium server output will be written in a file called `selenium_server_log.txt` under Robot Framework output directory.

This keyword does not work with Jython 2.2 or older.</doc>
<arguments>
<arg>*params</arg>
</arguments>
</kw>
<kw name="Submit Form">
<doc>Submits a form identified by `locator`.

If `locator` is empty, first form in the page will be submitted. Key attributes for forms are `id` and `name`. See `introduction` for details about locating elements and about meaning of `dont_wait` argument.</doc>
<arguments>
<arg>locator=</arg>
<arg>dont_wait=</arg>
</arguments>
</kw>
<kw name="Switch Browser">
<doc>Switches between active browsers using index or alias.

Index is got from `Open Browser` and alias can be given to it.

Examples:
| Open Browser        | http://google.com | ff       |
| Location Should Be  | http://google.com |          |
| Open Browser        | http://yahoo.com  | ie       | 2nd conn |
| Location Should Be  | http://yahoo.com  |          |
| Switch Browser      | 1                 | # index  |
| Page Should Contain | I'm feeling lucky |          |
| Switch Browser      | 2nd conn          | # alias  |
| Page Should Contain | More Yahoo!       |          |
| Close All Browsers  |                   |          |

Above example expects that there was no other open browsers when opening the first one because it used index '1' when switching to it later. If you aren't sure about that you can store the index into a variable as below.

| ${id} =            | Open Browser  | http://google.com | *firefox |
| # Do something ... |
| Switch Browser     | ${id}         |                   |          |</doc>
<arguments>
<arg>index_or_alias</arg>
</arguments>
</kw>
<kw name="Text Field Should Contain">
<doc>Verifies text field identified by `locator` contains text `expected`.

`message` can be used to override default error message.

Key attributes for text fields are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>expected</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Textfield Value Should Be">
<doc>Verifies the value in text field identified by `locator` is exactly `expected`.

`message` can be used to override default error message.

Key attributes for text fields are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>expected</arg>
<arg>message=</arg>
</arguments>
</kw>
<kw name="Title Should Be">
<doc>Verifies that current page title equals `title`.</doc>
<arguments>
<arg>title</arg>
</arguments>
</kw>
<kw name="Unselect Checkbox">
<doc>Removes selection of checkbox identified by `locator`.

Does nothing if the checkbox is not checked. Key attributes for checkboxes are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
</arguments>
</kw>
<kw name="Unselect Frame">
<doc>Sets the top frame as the current frame.</doc>
<arguments>
</arguments>
</kw>
<kw name="Unselect From List">
<doc>Unselects given values from list identified by locator.

As a special case, giving empty list as `*selection` will remove all selections.

Key attributes for list are `id` and `name`. See `introduction` for details about locating elements.</doc>
<arguments>
<arg>locator</arg>
<arg>*values</arg>
</arguments>
</kw>
<kw name="Wait For Condition">
<doc>Waits either for given condition to be true or until timeout expires.

`condition` can be arbitrary javascript expression. It can be multiple lines, but only the statement in the last line is used for evaluation.

`timeout` must given using Robot Framework time syntax, see http://robotframework.googlecode.com/svn/trunk/doc/userguide/RobotFrameworkUserGuide.html#time-format.

See `Execute Javascript` for information about accessing the actual contents of the window through javascript.</doc>
<arguments>
<arg>condition</arg>
<arg>timeout=5 seconds</arg>
</arguments>
</kw>
<kw name="Wait Until Page Contains">
<doc>Waits until `text` appears on current page or `timeout` expires.

`timeout` must given using Robot Framework time syntax, see http://robotframework.googlecode.com/svn/trunk/doc/userguide/RobotFrameworkUserGuide.html#time-format.

Robot Framework built-in keyword `Wait Until Succeeds` can be used to get this kind of functionality for any Selenium keyword.</doc>
<arguments>
<arg>text</arg>
<arg>timeout</arg>
</arguments>
</kw>
</keywordspec>
