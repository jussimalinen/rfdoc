11:59:05.807 INFO - Java: Sun Microsystems Inc. 14.2-b01
11:59:05.808 INFO - OS: Linux 2.6.28-15-generic i386
11:59:05.829 INFO - v1.0.1 [2696], with Core v@VERSION@ [@REVISION@]
11:59:05.919 INFO - Version Jetty/5.1.x
11:59:05.920 INFO - Started HttpContext[/selenium-server/driver,/selenium-server/driver]
11:59:05.920 INFO - Started HttpContext[/selenium-server,/selenium-server]
11:59:05.920 INFO - Started HttpContext[/,/]
11:59:05.926 INFO - Started SocketListener on 0.0.0.0:4445
11:59:05.926 INFO - Started org.mortbay.jetty.Server@fc9944
11:59:08.010 INFO - Checking Resource aliases
11:59:08.015 INFO - Command request: getNewBrowserSession[*firefox, http://localhost:8001/, ] on session null
11:59:08.017 INFO - creating new remote session
11:59:08.109 INFO - Allocated session 099f5bd38f4248309d5a9148e18ef011 for http://localhost:8001/, launching...
11:59:08.146 INFO - Preparing Firefox profile...
11:59:10.659 INFO - Launching Firefox...
11:59:13.076 INFO - Got result: OK,099f5bd38f4248309d5a9148e18ef011 on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.091 INFO - Command request: open[http://localhost:8001/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.269 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.273 INFO - Command request: getSpeed[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.274 INFO - Got result: OK,0 on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.276 INFO - Command request: setSpeed[0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.276 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.501 INFO - Command request: open[http://localhost:8001/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.575 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.579 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.593 INFO - Got result: OK,RFDoc | Welcome on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.599 INFO - Command request: isTextPresent[No libraries in the system., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.620 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.629 INFO - Command request: open[http://localhost:8001/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.699 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.703 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.732 INFO - Got result: OK,RFDoc | Welcome on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.746 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.836 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | Welcome</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/upload/">upload</a>]</div>
  </div>
  <div id="content">
    
<h2>Welcome</h2>
<p class="info">
  RFDoc is a system for storing and searching Robot Framework test
  library and resource file documentations.
</p>
<div class="hr"><hr></div>


<h2>Search keywords</h2>
<form enctype="multipart/form-data" action="/search/" method="post">
  
  <table id="search">
    <tbody><tr>
      <td><input name="search_term" id="id_search_term" type="text"></td>
      <td>
        <input name="include_doc" id="id_include_doc" type="checkbox">
        <label for="id_include_doc">Search also documentation</label>
      </td>
  </tr></tbody></table>
  <input name="search_button" value="Search" type="submit">
</form>


<div class="hr"><hr></div>
<h2>Libraries</h2>

<ul class="libraries">
  
  <li><a href="/lib/BuiltIn">BuiltIn</a></li>
  
  <li><a href="/lib/ExampleLibrary">ExampleLibrary</a></li>
  
  <li><a href="/lib/SeleniumLibrary">SeleniumLibrary</a></li>
  
</ul>


  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:13.853 INFO - Command request: open[http://localhost:8001/lib/BuiltIn, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.121 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.136 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.144 INFO - Got result: OK,RFDoc | BuiltIn on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.150 INFO - Command request: getText[xpath=//h2, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.201 INFO - Got result: OK,BuiltIn on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.205 INFO - Command request: isTextPresent[Version: 2.1, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.409 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.413 INFO - Command request: isTextPresent[An always available standard library with often needed keywords., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.592 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.598 INFO - Command request: open[http://localhost:8001/lib/ExampleLibrary, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.638 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.642 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.692 INFO - Got result: OK,RFDoc | ExampleLibrary on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.704 INFO - Command request: getText[xpath=//h2, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.711 INFO - Got result: OK,ExampleLibrary on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.715 INFO - Command request: isTextPresent[First Library Doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.729 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.733 INFO - Command request: isTextPresent[Version:, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.749 INFO - Got result: OK,false on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.756 INFO - Command request: open[http://localhost:8001/lib/ExampleLibrary, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.836 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.840 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.859 INFO - Got result: OK,RFDoc | ExampleLibrary on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.864 INFO - Command request: getText[importing, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.884 INFO - Got result: OK,Importing on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.888 INFO - Command request: isTextPresent[Library can be imported with optional arguments., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.929 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.934 INFO - Command request: isTextPresent[timeout=3.0, is_regexp=False, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.965 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:14.982 INFO - Command request: open[http://localhost:8001/lib/BuiltIn, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.220 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.223 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.234 INFO - Got result: OK,RFDoc | BuiltIn on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.247 INFO - Command request: isElementPresent[importing, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.285 INFO - Got result: OK,false on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.295 INFO - Command request: open[http://localhost:8001/lib/BuiltIn, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.496 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.499 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.518 INFO - Got result: OK,RFDoc | BuiltIn on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.523 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.684 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | BuiltIn</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>BuiltIn</h2>

<p class="version"><b>Version:</b> 2.1</p>

<h3 id="introduction">Introduction</h3>
<p class="libintro">An always available standard library with often needed keywords.<br>
<br>
<span class="name">BuiltIn</span> is Robot Framework's standard library that provides a set of generic keywords needed often. It is imported automatically and thus always available. The provided keywords can be used, for example, for verifications (e.g. <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a>, <a href="#Should%20Contain" class="name">Should Contain</a>), conversions (e.g. <a href="#Convert%20To%20Integer" class="name">Convert To Integer</a>) and for various other purposes (e.g. <a href="#Log" class="name">Log</a>, <a href="#Sleep" class="name">Sleep</a>, <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a>, <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>).</p>

<h3>Shortcuts</h3>
<div class="shortcuts">

<a href="#Call%20Method" title="Calls the named method of the given object with the provided arguments.">Call&nbsp;Method</a>
·

<a href="#Catenate" title="Catenates the given items together and returns the resulted string.">Catenate</a>
·

<a href="#Comment" title="Displays the given messages in the log file as keyword arguments.">Comment</a>
·

<a href="#Convert%20To%20Boolean" title="Converts the given item to Boolean true or false.">Convert&nbsp;To&nbsp;Boolean</a>
·

<a href="#Convert%20To%20Integer" title="Converts the given item to an integer number.">Convert&nbsp;To&nbsp;Integer</a>
·

<a href="#Convert%20To%20Number" title="Converts the given item to a floating point number.">Convert&nbsp;To&nbsp;Number</a>
·

<a href="#Convert%20To%20String" title="Converts the given item to a Unicode string.">Convert&nbsp;To&nbsp;String</a>
·

<a href="#Create%20List" title="Returns a list containing given items.">Create&nbsp;List</a>
·

<a href="#Evaluate" title="Evaluates the given expression in Python and returns the results.">Evaluate</a>
·

<a href="#Fail" title="Fails the test immediately with the given (optional) message.">Fail</a>
·

<a href="#Get%20Count" title="Returns and logs how many times `item2` is found from `item1`.">Get&nbsp;Count</a>
·

<a href="#Get%20Length" title="Returns and logs the length of the given item.">Get&nbsp;Length</a>
·

<a href="#Get%20Time" title="Returns the current time in the requested format.">Get&nbsp;Time</a>
·

<a href="#Grep" title="*DEPRECATED* Use `Get Lines Matching XXX` keywords from `String` library instead. This keyword will be removed in Robot Framework 2.2.">Grep</a>
·

<a href="#Import%20Library" title="Imports a library with the given name and optional arguments.">Import&nbsp;Library</a>
·

<a href="#Import%20Variables" title="Imports a variable file with the given path and optional arguments.">Import&nbsp;Variables</a>
·

<a href="#Length%20Should%20Be" title="Verifies that the length of the given item is correct.">Length&nbsp;Should&nbsp;Be</a>
·

<a href="#Log" title="Logs the given message with the given level.">Log</a>
·

<a href="#Log%20Many" title="Logs the given messages as separate entries with the INFO level.">Log&nbsp;Many</a>
·

<a href="#Log%20Variables" title="Logs all variables in the current scope with given log level.">Log&nbsp;Variables</a>
·

<a href="#No%20Operation" title="Does absolutely nothing.">No&nbsp;Operation</a>
·

<a href="#Regexp%20Escape" title="Returns each argument string escaped for use as a regular expression.">Regexp&nbsp;Escape</a>
·

<a href="#Remove%20Tags" title="Removes given `tags` from the current test or all tests in a suite.">Remove&nbsp;Tags</a>
·

<a href="#Repeat%20Keyword" title="Executes the specified keyword multiple times.">Repeat&nbsp;Keyword</a>
·

<a href="#Replace%20Variables" title="Replaces variables in the given text with their current values.">Replace&nbsp;Variables</a>
·

<a href="#Run%20Keyword" title="Executes the given keyword with the given arguments.">Run&nbsp;Keyword</a>
·

<a href="#Run%20Keyword%20And%20Expect%20Error" title="Runs the keyword and checks that the expected error occurred.">Run&nbsp;Keyword&nbsp;And&nbsp;Expect&nbsp;Error</a>
·

<a href="#Run%20Keyword%20And%20Ignore%20Error" title="Runs the given keyword with the given arguments and ignores possible error.">Run&nbsp;Keyword&nbsp;And&nbsp;Ignore&nbsp;Error</a>
·

<a href="#Run%20Keyword%20If" title="Runs the given keyword with the given arguments, if `condition` is true.">Run&nbsp;Keyword&nbsp;If</a>
·

<a href="#Run%20Keyword%20If%20All%20Critical%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all critical tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Critical&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20All%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Critical%20Tests%20Failed" title="Runs the given keyword with the given arguments, if any critical tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Critical&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Tests%20Failed" title="Runs the given keyword with the given arguments, if one or more tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Failed" title="Runs the given keyword with the given arguments, if the test failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Passed" title="Runs the given keyword with the given arguments, if the test passed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20Unless" title="Runs the given keyword with the given arguments, if `condition` is false.">Run&nbsp;Keyword&nbsp;Unless</a>
·

<a href="#Set%20Global%20Variable" title="Makes a variable available globally in all tests and suites.">Set&nbsp;Global&nbsp;Variable</a>
·

<a href="#Set%20Library%20Search%20Order" title="Sets the resolution order to use when a name matches multiple keywords.">Set&nbsp;Library&nbsp;Search&nbsp;Order</a>
·

<a href="#Set%20Log%20Level" title="Sets the log threshold to the specified level and returns the old level.">Set&nbsp;Log&nbsp;Level</a>
·

<a href="#Set%20Suite%20Variable" title="Makes a variable available everywhere within the scope of the current suite.">Set&nbsp;Suite&nbsp;Variable</a>
·

<a href="#Set%20Tags" title="Adds given `tags` for the current test or all tests in a suite.">Set&nbsp;Tags</a>
·

<a href="#Set%20Test%20Variable" title="Makes a variable available everywhere within the scope of the current test.">Set&nbsp;Test&nbsp;Variable</a>
·

<a href="#Set%20Variable" title="Returns the given argument which can then be assigned to a variable.">Set&nbsp;Variable</a>
·

<a href="#Set%20Variable%20If" title="Sets variable based on the given condition.">Set&nbsp;Variable&nbsp;If</a>
·

<a href="#Should%20Be%20Empty" title="Verifies that the given item is empty.">Should&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Be%20Equal" title="Fails if the given objects are unequal.">Should&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Be%20Equal%20As%20Integers" title="Fails if objects are unequal after converting them to integers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Be%20Equal%20As%20Numbers" title="Fails if objects are unequal after converting them to real numbers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Be%20Equal%20As%20Strings" title="Fails if objects are unequal after converting them to strings.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Be%20True" title="Fails if the given condition is not true.">Should&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Contain" title="Fails if `item1` does not contain `item2` one or more times.">Should&nbsp;Contain</a>
·

<a href="#Should%20Contain%20X%20Times" title="Fails if `item1` does not contain `item2` `count` times.">Should&nbsp;Contain&nbsp;X&nbsp;Times</a>
·

<a href="#Should%20End%20With" title="Fails if the string `str1` does not end with the string `str2`.">Should&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Match" title="Fails unless the given `string` matches the given `pattern`.">Should&nbsp;Match</a>
·

<a href="#Should%20Match%20Regexp" title="Fails if `string` does not match `pattern` as a regular expression.">Should&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Be%20Empty" title="Verifies that the given item is not empty.">Should&nbsp;Not&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Not%20Be%20Equal" title="Fails if the given objects are equal.">Should&nbsp;Not&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Integers" title="Fails if objects are equal after converting them to integers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Numbers" title="Fails if objects are equal after converting them to real numbers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Strings" title="Fails if objects are equal after converting them to strings.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Not%20Be%20True" title="Fails if the given condition is true.">Should&nbsp;Not&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Not%20Contain" title="Fails if `item1` contains `item2` one or more times.">Should&nbsp;Not&nbsp;Contain</a>
·

<a href="#Should%20Not%20End%20With" title="Fails if the string `str1` ends with the string `str2`.">Should&nbsp;Not&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Not%20Match" title="Fails if the given `string` matches the given `pattern`.">Should&nbsp;Not&nbsp;Match</a>
·

<a href="#Should%20Not%20Match%20Regexp" title="Fails if `string` matches `pattern` as a regular expression.">Should&nbsp;Not&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Start%20With" title="Fails if the string `str1` starts with the string `str2`.">Should&nbsp;Not&nbsp;Start&nbsp;With</a>
·

<a href="#Should%20Start%20With" title="Fails if the string `str1` does not start with the string `str2`.">Should&nbsp;Start&nbsp;With</a>
·

<a href="#Sleep" title="Pauses the test executed for the given time.">Sleep</a>
·

<a href="#Syslog" title="*DEPRECATED* Use `Log` keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.">Syslog</a>
·

<a href="#Variable%20Should%20Exist" title="Fails unless the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Exist</a>
·

<a href="#Variable%20Should%20Not%20Exist" title="Fails if the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Not&nbsp;Exist</a>
·

<a href="#Wait%20Until%20Keyword%20Succeeds" title="Waits until the specified keyword succeeds or the given timeout expires.">Wait&nbsp;Until&nbsp;Keyword&nbsp;Succeeds</a>


</div>
<h3>Keywords</h3>
<table class="keywords">
  <tbody><tr>
    <th class="kw">Keyword</th>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="kw" id="Call Method">Call Method</td>
    <td class="arg">object, method_name, *args</td>
    <td class="doc">Calls the named method of the given object with the provided arguments.<br>
<br>
The possible return value from the method is returned and can be assigned to a variable. Keyword fails both if the object does not have a method with the given name or if executing the method raises an exception.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Call Method</td>
<td>${hashtable}</td>
<td>put</td>
<td>myname</td>
<td>myvalue</td>
</tr>
<tr>
<td>${isempty} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>isEmpty</td>
<td></td>
</tr>
<tr>
<td>Should Not Be True</td>
<td>${isempty}</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${value} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>get</td>
<td>myname</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${value}</td>
<td>myvalue</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Catenate">Catenate</td>
    <td class="arg">*items</td>
    <td class="doc">Catenates the given items together and returns the resulted string.<br>
<br>
By default, items are catenated with spaces, but if the first item contains the string 'SEPARATOR=&lt;sep&gt;', the separator '&lt;sep&gt;' is used. Items are converted into strings when necessary.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${str1} =</td>
<td>Catenate</td>
<td>Hello</td>
<td>world</td>
<td></td>
</tr>
<tr>
<td>${str2} =</td>
<td>Catenate</td>
<td>SEPARATOR=---</td>
<td>Hello</td>
<td>world</td>
</tr>
<tr>
<td>${str3} =</td>
<td>Catenate</td>
<td>SEPARATOR=</td>
<td>Hello</td>
<td>world</td>
</tr>
</tbody></table>
=&gt;<br>
- ${str1} = 'Hello world'<br>
- ${str2} = 'Hello---world'<br>
- ${str3} = 'Helloworld'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Comment">Comment</td>
    <td class="arg">*messages</td>
    <td class="doc">Displays the given messages in the log file as keyword arguments.<br>
<br>
This keyword does nothing with the arguments it receives, but as they are visible in the log, this keyword can be used to display simple messages. Given arguments are ignored so thoroughly that they can even contain non-existing variables. If you are interested about variable values, you can use the <a href="#Log" class="name">Log</a> or <a href="#Log%20Many" class="name">Log Many</a> keywords.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Boolean">Convert To Boolean</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to Boolean true or false.<br>
<br>
Handles strings 'True' and 'False' (case-insensitive) as expected, otherwise returns item's truth value using Python's 'bool' method. For more information about truth values, see <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Integer">Convert To Integer</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to an integer number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Number">Convert To Number</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a floating point number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To String">Convert To String</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a Unicode string.<br>
<br>
Uses '__unicode__' or '__str__' method with Python objects and 'toString' with Java objects.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Create List">Create List</td>
    <td class="arg">*items</td>
    <td class="doc">Returns a list containing given items.<br>
<br>
The returned list can be assigned both to ${scalar} and @{list} variables. The earlier can be used e.g. with Java keywords expecting an array as an argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>@{list} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${scalar} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${ints} =</td>
<td>Create List</td>
<td>${1}</td>
<td>${2}</td>
<td>${3}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Evaluate">Evaluate</td>
    <td class="arg">expression, modules=None</td>
    <td class="doc">Evaluates the given expression in Python and returns the results.<br>
<br>
<span class="name">modules</span> argument can be used to specify a comma separated list of Python modules to be imported and added to the namespace of the evaluated <span class="name">expression</span>.<br>
<br>
Examples (expecting ${result} is 3.14):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status} =</td>
<td>Evaluate</td>
<td>0 &lt; ${result} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>${down} &nbsp; =</td>
<td>Evaluate</td>
<td>int(${result})</td>
<td></td>
</tr>
<tr>
<td>${up} &nbsp; &nbsp; =</td>
<td>Evaluate</td>
<td>math.ceil(${result})</td>
<td>math</td>
</tr>
<tr>
<td>${random} =</td>
<td>Evaluate</td>
<td>random.randint(0, sys.maxint)</td>
<td>random,sys</td>
</tr>
</tbody></table>
=&gt;<br>
- ${status} = True<br>
- ${down} = 3<br>
- ${up} = 4.0<br>
- ${random} = &lt;random integer&gt;<br>
<br>
Notice that instead of creating complicated expressions, it is recommended to move the logic into a test library.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Fail">Fail</td>
    <td class="arg">msg=None</td>
    <td class="doc">Fails the test immediately with the given (optional) message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Count">Get Count</td>
    <td class="arg">item1, item2</td>
    <td class="doc">Returns and logs how many times <span class="name">item2</span> is found from <span class="name">item1</span>.<br>
<br>
This keyword works with Python strings and lists and all objects that either have 'count' method or can be converted to Python lists.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${count} =</td>
<td>Get Count</td>
<td>${some item}</td>
<td>interesting value</td>
</tr>
<tr>
<td>Should Be True</td>
<td>5 &lt; ${count} &lt; 10</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Length">Get Length</td>
    <td class="arg">item</td>
    <td class="doc">Returns and logs the length of the given item.<br>
<br>
The keyword first tries to get the length with the Python function 'len', which calls the item's '__len__' method internally. If that fails, the keyword tries to call the item's 'length' and 'size' methods directly. The final attempt is trying to get the value of the item's 'length' attribute. If all these attempts are unsuccessful, the keyword fails.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Time">Get Time</td>
    <td class="arg">format=timestamp</td>
    <td class="doc">Returns the current time in the requested format.<br>
<br>
How time is returned is determined based on the given <span class="name">format</span> string as follows. Note that all checks are case-insensitive.<br>
<br>
- If <span class="name">format</span> contains the word 'epoch', the time is returned in seconds after the UNIX epoch. The return value is always an integer.<br>
<br>
- If <span class="name">format</span> contains any of the words 'year', 'month', 'day', 'hour', 'min', or 'sec', only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of words in <span class="name">format</span> is not significant. The parts are returned as zero-padded strings (e.g. May -&gt; '05').<br>
<br>
- Otherwise (and by default) the time is returned as a timestamp string in the format '2006-02-24 15:08:31'.<br>
<br>
Examples (expecting the current time is 2006-03-29 15:06:21):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${time} =</td>
<td>Get Time</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${secs} =</td>
<td>Get Time</td>
<td>epoch</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${year} =</td>
<td>Get Time</td>
<td>return year</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${yyyy}</td>
<td>${mm}</td>
<td>${dd} =</td>
<td>Get Time</td>
<td>year,month,day</td>
</tr>
<tr>
<td>@{time} =</td>
<td>Get Time</td>
<td>year month day hour min sec</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${y}</td>
<td>${s} =</td>
<td>Get Time</td>
<td>seconds and year</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${time} = '2006-03-29 15:06:21'<br>
- ${secs} = 1143637581<br>
- ${year} = '2006'<br>
- ${yyyy} = '2006', ${mm} = '03', ${dd} = '29'<br>
- @{time} = ['2006', '03', '29', '15', '06', '21']<br>
- ${y} = '2006'<br>
- ${s} = '21'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Grep">Grep</td>
    <td class="arg">text, pattern, pattern_type=literal string</td>
    <td class="doc"><b>DEPRECATED</b> Use <span class="name">Get Lines Matching XXX</span> keywords from <span class="name">String</span> library instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Library">Import Library</td>
    <td class="arg">name, *args</td>
    <td class="doc">Imports a library with the given name and optional arguments.<br>
<br>
This functionality allows dynamic importing of libraries while tests are running. That may be necessary, if the library itself is dynamic and not yet available when test data is processed. In a normal case, libraries should be imported using the Library setting in the Setting table.<br>
<br>
This keyword supports importing libraries both using library names and physical paths. When path are used, they must be given in absolute format. Starting from 2.0.2 version, forward slashes can be used as path separators in all operating systems. It is possible to use arguments as well as to give a custom name with 'WITH NAME' syntax. For more information about importing libraries, see Robot Framework User Guide.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Library</td>
<td>MyLibrary</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/Library.py</td>
<td>some</td>
<td>args</td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/../libs/Lib.java</td>
<td>arg</td>
<td>WITH NAME</td>
<td>JavaLib</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Variables">Import Variables</td>
    <td class="arg">path, *args</td>
    <td class="doc">Imports a variable file with the given path and optional arguments.<br>
<br>
Variables imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Variables setting. These variables override possible existing variables with the same names and this functionality can thus be used to import new variables, e.g. for each test in a test suite.<br>
<br>
The given path must be absolute. Starting from 2.0.2 version, forward slashes can be used as path separator regardless the operating system, but on earlier versions ${/} variable must be used instead.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Variables</td>
<td>${CURDIR}/variables.py</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Variables</td>
<td>${CURDIR}/../vars/env.py</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Length Should Be">Length Should Be</td>
    <td class="arg">item, length, msg=None</td>
    <td class="doc">Verifies that the length of the given item is correct.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log">Log</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc">Logs the given message with the given level.<br>
<br>
Valid levels are TRACE, DEBUG, INFO (default), HTML and WARN.<br>
<br>
HTML level is special because it writes the message into the log file without escaping HTML code from it. For example logging a message like '&lt;img src="image.png"&gt;' with that level creates an image, but with other levels you see just that string. &nbsp;Logging HTML messages should be used with care, because invalid messages can corrupt the whole log file. &nbsp;The actual log level used for HTML messages is INFO.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Many">Log Many</td>
    <td class="arg">*messages</td>
    <td class="doc">Logs the given messages as separate entries with the INFO level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Variables">Log Variables</td>
    <td class="arg">level=INFO</td>
    <td class="doc">Logs all variables in the current scope with given log level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="No Operation">No Operation</td>
    <td class="arg"></td>
    <td class="doc">Does absolutely nothing.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Regexp Escape">Regexp Escape</td>
    <td class="arg">*patterns</td>
    <td class="doc">Returns each argument string escaped for use as a regular expression.<br>
<br>
This keyword can be used to escape strings to be used with <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> and <a href="#Should%20Not%20Match%20Regexp" class="name">Should Not Match Regexp</a> keywords.<br>
<br>
Escaping is done with Python's re.escape() function.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${escaped} =</td>
<td>Regexp Escape</td>
<td>${original}</td>
</tr>
<tr>
<td>@{strings} =</td>
<td>Regexp Escape</td>
<td>@{strings}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Remove Tags">Remove Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Removes given <span class="name">tags</span> from the current test or all tests in a suite.<br>
<br>
Tags can be given exactly or using a pattern where '*' matches anything and '?' matches one character.<br>
<br>
This keyword can affect either one test case or all test cases in a test suite similarly as <a href="#Set%20Tags" class="name">Set Tags</a> keyword.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Remove Tags</td>
<td>mytag</td>
<td>something-*</td>
<td>?ython</td>
</tr>
</tbody></table>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Repeat Keyword">Repeat Keyword</td>
    <td class="arg">times, name, *args</td>
    <td class="doc">Executes the specified keyword multiple times.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>, and <span class="name">times</span> specifies how many the keyword should be executed. <span class="name">times</span> can be given as an integer or as a string that can be converted to an integer. It can also have postfix 'times' or 'x' (case and space insensitive) to make the expression easier to read.<br>
<br>
If <span class="name">times</span> is zero or negative, the keyword is not executed at all. This keyword fails immediately if any of the execution rounds fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Repeat Keyword</td>
<td>5 times</td>
<td>Goto Previous Page</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Repeat Keyword</td>
<td>${var}</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Replace Variables">Replace Variables</td>
    <td class="arg">text</td>
    <td class="doc">Replaces variables in the given text with their current values.<br>
<br>
If the text contains undefined variables, this keyword fails.<br>
<br>
Example:<br>
<br>
The file 'template.txt' contains 'Hello ${NAME}!' and variable '${NAME}' has the value 'Robot'.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${template} =</td>
<td>Get File</td>
<td>${CURDIR}/template.txt</td>
</tr>
<tr>
<td>${message} =</td>
<td>Replace Variables</td>
<td>${template}</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${message}</td>
<td>Hello Robot!</td>
</tr>
</tbody></table>
<br>
If the given <span class="name">text</span> contains only a single variable, its value is returned as-is. Otherwise, and always with Robot Framework 2.0.3 and earlier, this keyword returns a string.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword">Run Keyword</td>
    <td class="arg">name, *args</td>
    <td class="doc">Executes the given keyword with the given arguments.<br>
<br>
Because the name of the keyword to execute is given as an argument, it can be a variable and thus set dynamically, e.g. from a return value of another keyword or from the command line.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Expect Error">Run Keyword And Expect Error</td>
    <td class="arg">expected_error, name, *args</td>
    <td class="doc">Runs the keyword and checks that the expected error occurred.<br>
<br>
The expected error must be given in the same format as in Robot Framework reports. It can be a pattern containing characters '?', which matches to any single character and '*', which matches to any number of any characters. <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
If the expected error occurs, the error message is returned and it can be further processed/tested, if needed. If there is no error, or the error does not match the expected error, this keyword fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Run Keyword And Expect Error</td>
<td>My error</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
<tr>
<td>${msg} =</td>
<td>Run Keyword And Expect Error</td>
<td>*</td>
<td>My KW</td>
<td></td>
</tr>
<tr>
<td>Should Start With</td>
<td>${msg}</td>
<td>Once upon a time in</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Ignore Error">Run Keyword And Ignore Error</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments and ignores possible error.<br>
<br>
This keyword returns two values, so that the first is either 'PASS' or 'FAIL', depending on the status of the executed keyword. The second value is either the return value of the keyword or the received error message.<br>
<br>
The keyword name and arguments work as in <a href="#Run%20Keyword" class="name">Run Keyword</a>. See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for a usage example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If">Run Keyword If</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is true.<br>
<br>
The given <span class="name">condition</span> is evaluated similarly as with <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword, and <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
Example, a simple if/else construct:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status}</td>
<td>${value} =</td>
<td>Run Keyword And Ignore Error</td>
<td>My Keyword</td>
</tr>
<tr>
<td>Run Keyword If</td>
<td>'${status}' == 'PASS'</td>
<td>Some Action</td>
<td></td>
</tr>
<tr>
<td>Run Keyword Unless</td>
<td>'${status}' == 'PASS'</td>
<td>Another Action</td>
<td></td>
</tr>
</tbody></table>
<br>
In this example, only either 'Some Action' or 'Another Action' is executed, based on the status of 'My Keyword'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Critical Tests Passed">Run Keyword If All Critical Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all critical tests passed.<br>
<br>
This keyword can only be used in suite teardown. Trying to use it in any other place will result in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Tests Passed">Run Keyword If All Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all tests passed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Critical Tests Failed">Run Keyword If Any Critical Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if any critical tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Tests Failed">Run Keyword If Any Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if one or more tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Failed">Run Keyword If Test Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test failed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Passed">Run Keyword If Test Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test passed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword Unless">Run Keyword Unless</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is false.<br>
<br>
See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for more information and an example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Global Variable">Set Global Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available globally in all tests and suites.<br>
<br>
Variables set with this keyword are globally available in all test cases and suites executed after setting them. Setting variables with this keyword thus has the same effect as creating from the command line using the options '--variable' or '--variablefile'. Because this keyword can change variables everywhere, it should be used with care.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Library Search Order">Set Library Search Order</td>
    <td class="arg">*libraries</td>
    <td class="doc">Sets the resolution order to use when a name matches multiple keywords.<br>
<br>
The library search order is used to resolve conflicts when a keyword name in the test data matches multiple keywords. The first library containing the keyword is selected and that keyword implementation used. If keyword is not found from any library, or the library search order is not set, executing the specified keyword fails.<br>
<br>
When this keyword is used, there is no need to use the long <span class="name">LibraryName.Keyword Name</span> notation. &nbsp;For example, instead of having<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>MyLibrary.Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>MyLibrary.Another Keyword</td>
<td></td>
</tr>
<tr>
<td>MyLibrary.Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
you can have<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Library Search Order</td>
<td>MyLibrary</td>
</tr>
<tr>
<td>Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>Another Keyword</td>
<td></td>
</tr>
<tr>
<td>Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
The library search order is valid only in the suite where this keyword is used in. The old order is returned and can be used to reset the search order later.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Log Level">Set Log Level</td>
    <td class="arg">level</td>
    <td class="doc">Sets the log threshold to the specified level and returns the old level.<br>
<br>
Messages below the level will not logged. The default logging level is INFO, but it can be overridden with the command line option '--loglevel'.<br>
<br>
The available levels: TRACE, DEBUG, INFO (default), WARN and NONE (no logging).</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Suite Variable">Set Suite Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current suite.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test suite. Setting variables with this keyword thus has the same effect as creating them using the Variable table in the test data file or importing them from variable files. Other test suites, including possible child test suites, will not see variables set with this keyword.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
If a variable already exists within the new scope, its value will be overwritten. Otherwise a new variable is created. If a variable already exists within the current scope, the value can be left empty and the variable within the new scope gets the value within the current scope.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Suite Variable</td>
<td>${GREET}</td>
<td>Hello, world!</td>
</tr>
<tr>
<td>${ID} =</td>
<td>Get ID</td>
<td></td>
</tr>
<tr>
<td>Set Suite Variable</td>
<td>${ID}</td>
<td></td>
</tr>
</tbody></table>
<br>
See also <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a> and <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Tags">Set Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Adds given <span class="name">tags</span> for the current test or all tests in a suite.<br>
<br>
When this keyword is used inside a test case, that test gets the specified tags and other tests are not affected.<br>
<br>
If this keyword is used in a suite setup, all test cases in that suite, recursively, gets the given tags. It is a failure to use this keyword in a suite teardown.<br>
<br>
See <a href="#Remove%20Tags" class="name">Remove Tags</a> for another keyword to modify tags at test execution time.<br>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Test Variable">Set Test Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current test.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test case. For example, if you set a variable in a user keyword, it is available both in the test case level and also in all other user keywords used in the current test. Other test cases will not see variables set with this keyword.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable">Set Variable</td>
    <td class="arg">*values</td>
    <td class="doc">Returns the given argument which can then be assigned to a variable.<br>
<br>
This keyword is mainly used for setting scalar variables. Additionally it can be used for converting a scalar variable containing a list to a list variable or to multiple scalar variables.<br>
<br>
Using this keyword with more (or less) than one value has been deprecated in Robot Framework 2.1 and that usage will be removed in 2.2 version.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${hi} =</td>
<td>Set Variable</td>
<td>Hello, world!</td>
<td></td>
</tr>
<tr>
<td>${hi2} =</td>
<td>Set Variable</td>
<td>I said: ${hi}</td>
<td></td>
</tr>
<tr>
<td>@{list} =</td>
<td>Set Variable</td>
<td>${list with some items}</td>
<td></td>
</tr>
<tr>
<td>${item1}</td>
<td>${item2} =</td>
<td>Set Variable</td>
<td>${list with 2 items}</td>
</tr>
</tbody></table>
<br>
Variables created with this keyword are available only in the scope where they are created. See <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>, <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a> and <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for information on how to set variables so that they are available also in a larger scope.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable If">Set Variable If</td>
    <td class="arg">condition, *values</td>
    <td class="doc">Sets variable based on the given condition.<br>
<br>
The basic usage is giving a condition and two values. The given condition is first evaluated the same way as with the <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword. If the condition is true, then the first value is returned, and otherwise the second value is returned. The second value can also be omitted, in which case it has a default value None. This usage is illustrated in the examples below, where ${rc} is assumed to be zero.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var1} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
<td>nonzero</td>
</tr>
<tr>
<td>${var2} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>value1</td>
<td>value2</td>
</tr>
<tr>
<td>${var3} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>whatever</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${var1} = 'zero'<br>
- ${var2} = 'value2'<br>
- ${var3} = None<br>
<br>
Starting from Robot Framework 2.0.2 it is also possible to have 'Else If' support by replacing the second value with another condition, and having two new values after it. If the first condition is not true, the second is evaluated and one of the values after it is returned based on its truth value. This can be continued by adding more conditions without a limit.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 0</td>
<td>greater than zero</td>
<td>less then zero</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td></td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 0</td>
<td>zero</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 1</td>
<td>one</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 2</td>
<td>two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 2</td>
<td>greater than two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &lt; 0</td>
<td>less than zero</td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Empty">Should Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal">Should Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are unequal.<br>
<br>
- If <span class="name">msg</span> is not given, the error message is 'first != second'.<br>
- If <span class="name">msg</span> is given and <span class="name">values</span> is either Boolean False or the string 'False' or 'No Values', the error message is simply <span class="name">msg</span>.<br>
- Otherwise the error message is '<span class="name">msg</span>: <span class="name">first</span> != <span class="name">second</span>'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Integers">Should Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Numbers">Should Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Strings">Should Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be True">Should Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is not true.<br>
<br>
If <span class="name">condition</span> is a string (e.g. '${rc} &lt; 10'), it is evaluated as a Python expression using the built-in 'eval' function and the keyword status is decided based on the result. If a non-string item is given, the status is got directly from its truth value as explained at <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.<br>
<br>
The default error message ('&lt;condition&gt; should be true') is not very informative, but it can be overridden with the <span class="name">msg</span> argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Be True</td>
<td>${rc} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>Should Be True</td>
<td>'${status}' == 'PASS'</td>
<td># Strings must be quoted</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${number}</td>
<td># Passes if ${number} is not zero</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${list}</td>
<td># Passes if ${list} is not empty</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain">Should Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain</td>
<td>${output}</td>
<td>PASS</td>
</tr>
<tr>
<td>Should Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain X Times">Should Contain X Times</td>
    <td class="arg">item1, item2, count, msg=None</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> <span class="name">count</span> times.<br>
<br>
Works with strings, lists and all objects that <a href="#Get%20Count" class="name">Get Count</a> works with. The default error message can be overridden with <span class="name">msg</span> and the actual count is always logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain X Times</td>
<td>${output}</td>
<td>hello</td>
<td>2</td>
</tr>
<tr>
<td>Should Contain X Times</td>
<td>${some list}</td>
<td>value</td>
<td>3</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should End With">Should End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not end with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match">Should Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails unless the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern, '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match Regexp">Should Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> does not match <span class="name">pattern</span> as a regular expression.<br>
<br>
Regular expression check is done using the Python 're' module, which has a pattern syntax derived from Perl, and thus also very similar to the one in Java. See the following documents for more details about regular expressions in general and Python implementation in particular.<br>
<br>
* <a href="http://docs.python.org/lib/module-re.html">http://docs.python.org/lib/module-re.html</a><br>
* <a href="http://www.amk.ca/python/howto/regex/">http://www.amk.ca/python/howto/regex/</a><br>
<br>
Things to note about the regexp syntax in Robot Framework test data:<br>
<br>
1) Backslash is an escape character in the test data, and possible backslashes in the pattern must thus be escaped with another backslash (e.g. '\\d\\w+').<br>
<br>
2) Strings that may contain special characters, but should be handled as literal strings, can be escaped with the <a href="#Regexp%20Escape" class="name">Regexp Escape</a> keyword.<br>
<br>
3) The given pattern does not need to match the whole string. For example, the pattern 'ello' matches the string 'Hello world!'. If a full match is needed, the '^' and '$' characters can be used to denote the beginning and end of the string, respectively. For example, '^ello$' only matches the exact string 'ello'.<br>
<br>
4) Possible flags altering how the expression is parsed (e.g. re.IGNORECASE, re.MULTILINE) can be set by prefixing the pattern with the '(?iLmsux)' group (e.g. '(?im)pattern'). The available flags are 'IGNORECASE': 'i', 'MULTILINE': 'm', 'DOTALL': 's', 'VERBOSE': 'x', 'UNICODE': 'u', and 'LOCALE': 'L'.<br>
<br>
If this keyword passes, it returns the portion of the string that matched the pattern. Additionally, the possible captured groups are returned.<br>
<br>
See the <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> keyword for an explanation on how to override the default error message with the <span class="name">msg</span> and <span class="name">values</span> arguments.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>\\d{6}</td>
<td># Output contains six numbers</td>
</tr>
<tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>^\\d{6}$</td>
<td># Six numbers and nothing more</td>
</tr>
<tr>
<td>${ret} =</td>
<td>Should Match Regexp</td>
<td>Foo: 42</td>
<td>(?i)foo: \\d+</td>
</tr>
<tr>
<td>${match}</td>
<td>${group1}</td>
<td>${group2} =</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>Should Match Regexp</td>
<td>Bar: 43</td>
<td>(Foo|Bar): (\\d+)</td>
</tr>
</tbody></table>
=&gt;<br>
- ${ret} = 'Foo: 42'<br>
- ${match} = 'Bar: 43'<br>
- ${group1} = 'Bar'<br>
- ${group2} = '43'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Empty">Should Not Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is not empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal">Should Not Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are equal.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Integers">Should Not Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Numbers">Should Not Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Strings">Should Not Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be True">Should Not Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is true.<br>
<br>
See <a href="#Should%20Be%20True" class="name">Should Be True</a> for details about how <span class="name">condition</span> is evaluated and how <span class="name">msg</span> can be used to override the default error message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Contain">Should Not Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> contains <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Not Contain</td>
<td>${output}</td>
<td>FAILED</td>
</tr>
<tr>
<td>Should Not Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not End With">Should Not End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> ends with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match">Should Not Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match Regexp">Should Not Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> matches <span class="name">pattern</span> as a regular expression.<br>
<br>
See <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> for more information about arguments.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Start With">Should Not Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> starts with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Start With">Should Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not start with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Sleep">Sleep</td>
    <td class="arg">time, reason=None</td>
    <td class="doc">Pauses the test executed for the given time.<br>
<br>
<span class="name">time</span> may be either a number or a time string. Time strings are in a format such as '1 day 2 hours 3 minutes 4 seconds 5milliseconds' or '1d 2h 3m 4s 5ms', and they are fully explained in an appendix of Robot Framework User Guide. Optional <span class="name">reason</span> can be used to explain why sleeping is necessary. Both the time slept and the reason are logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Sleep</td>
<td>42</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>1.5</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>2 minutes 10 seconds</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>10s</td>
<td>Wait for a reply</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Syslog">Syslog</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc"><b>DEPRECATED</b> Use <a href="#Log" class="name">Log</a> keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Exist">Variable Should Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails unless the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Not Exist">Variable Should Not Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails if the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Wait Until Keyword Succeeds">Wait Until Keyword Succeeds</td>
    <td class="arg">timeout, retry_interval, name, *args</td>
    <td class="doc">Waits until the specified keyword succeeds or the given timeout expires.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>. If the specified keyword does not succeed within <span class="name">timeout</span>, this keyword fails. <span class="name">retry_interval</span> is the time to wait before trying to run the keyword again after the previous run has failed.<br>
<br>
Both <span class="name">timeout</span> and <span class="name">retry_interval</span> must be given in Robot Framework's time format (e.g. '1 minute', '2 min 3 s', '4.5').<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Wait Until Keyword Succeeds</td>
<td>2 min</td>
<td>5 sec</td>
<td>My keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
</tbody></table>
<div class="hr"><hr></div>
<p class="info">Altogether 72 keywords.</p>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.716 INFO - Command request: open[http://localhost:8001/lib/BuiltIn, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.918 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.938 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.953 INFO - Got result: OK,RFDoc | BuiltIn on session 099f5bd38f4248309d5a9148e18ef011
11:59:15.958 INFO - Command request: isTextPresent[Altogether 72 keywords., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.150 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.157 INFO - Command request: open[http://localhost:8001/lib/BuiltIn, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.357 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.361 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.379 INFO - Got result: OK,RFDoc | BuiltIn on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.385 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.439 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | BuiltIn</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>BuiltIn</h2>

<p class="version"><b>Version:</b> 2.1</p>

<h3 id="introduction">Introduction</h3>
<p class="libintro">An always available standard library with often needed keywords.<br>
<br>
<span class="name">BuiltIn</span> is Robot Framework's standard library that provides a set of generic keywords needed often. It is imported automatically and thus always available. The provided keywords can be used, for example, for verifications (e.g. <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a>, <a href="#Should%20Contain" class="name">Should Contain</a>), conversions (e.g. <a href="#Convert%20To%20Integer" class="name">Convert To Integer</a>) and for various other purposes (e.g. <a href="#Log" class="name">Log</a>, <a href="#Sleep" class="name">Sleep</a>, <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a>, <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>).</p>

<h3>Shortcuts</h3>
<div class="shortcuts">

<a href="#Call%20Method" title="Calls the named method of the given object with the provided arguments.">Call&nbsp;Method</a>
·

<a href="#Catenate" title="Catenates the given items together and returns the resulted string.">Catenate</a>
·

<a href="#Comment" title="Displays the given messages in the log file as keyword arguments.">Comment</a>
·

<a href="#Convert%20To%20Boolean" title="Converts the given item to Boolean true or false.">Convert&nbsp;To&nbsp;Boolean</a>
·

<a href="#Convert%20To%20Integer" title="Converts the given item to an integer number.">Convert&nbsp;To&nbsp;Integer</a>
·

<a href="#Convert%20To%20Number" title="Converts the given item to a floating point number.">Convert&nbsp;To&nbsp;Number</a>
·

<a href="#Convert%20To%20String" title="Converts the given item to a Unicode string.">Convert&nbsp;To&nbsp;String</a>
·

<a href="#Create%20List" title="Returns a list containing given items.">Create&nbsp;List</a>
·

<a href="#Evaluate" title="Evaluates the given expression in Python and returns the results.">Evaluate</a>
·

<a href="#Fail" title="Fails the test immediately with the given (optional) message.">Fail</a>
·

<a href="#Get%20Count" title="Returns and logs how many times `item2` is found from `item1`.">Get&nbsp;Count</a>
·

<a href="#Get%20Length" title="Returns and logs the length of the given item.">Get&nbsp;Length</a>
·

<a href="#Get%20Time" title="Returns the current time in the requested format.">Get&nbsp;Time</a>
·

<a href="#Grep" title="*DEPRECATED* Use `Get Lines Matching XXX` keywords from `String` library instead. This keyword will be removed in Robot Framework 2.2.">Grep</a>
·

<a href="#Import%20Library" title="Imports a library with the given name and optional arguments.">Import&nbsp;Library</a>
·

<a href="#Import%20Variables" title="Imports a variable file with the given path and optional arguments.">Import&nbsp;Variables</a>
·

<a href="#Length%20Should%20Be" title="Verifies that the length of the given item is correct.">Length&nbsp;Should&nbsp;Be</a>
·

<a href="#Log" title="Logs the given message with the given level.">Log</a>
·

<a href="#Log%20Many" title="Logs the given messages as separate entries with the INFO level.">Log&nbsp;Many</a>
·

<a href="#Log%20Variables" title="Logs all variables in the current scope with given log level.">Log&nbsp;Variables</a>
·

<a href="#No%20Operation" title="Does absolutely nothing.">No&nbsp;Operation</a>
·

<a href="#Regexp%20Escape" title="Returns each argument string escaped for use as a regular expression.">Regexp&nbsp;Escape</a>
·

<a href="#Remove%20Tags" title="Removes given `tags` from the current test or all tests in a suite.">Remove&nbsp;Tags</a>
·

<a href="#Repeat%20Keyword" title="Executes the specified keyword multiple times.">Repeat&nbsp;Keyword</a>
·

<a href="#Replace%20Variables" title="Replaces variables in the given text with their current values.">Replace&nbsp;Variables</a>
·

<a href="#Run%20Keyword" title="Executes the given keyword with the given arguments.">Run&nbsp;Keyword</a>
·

<a href="#Run%20Keyword%20And%20Expect%20Error" title="Runs the keyword and checks that the expected error occurred.">Run&nbsp;Keyword&nbsp;And&nbsp;Expect&nbsp;Error</a>
·

<a href="#Run%20Keyword%20And%20Ignore%20Error" title="Runs the given keyword with the given arguments and ignores possible error.">Run&nbsp;Keyword&nbsp;And&nbsp;Ignore&nbsp;Error</a>
·

<a href="#Run%20Keyword%20If" title="Runs the given keyword with the given arguments, if `condition` is true.">Run&nbsp;Keyword&nbsp;If</a>
·

<a href="#Run%20Keyword%20If%20All%20Critical%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all critical tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Critical&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20All%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Critical%20Tests%20Failed" title="Runs the given keyword with the given arguments, if any critical tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Critical&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Tests%20Failed" title="Runs the given keyword with the given arguments, if one or more tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Failed" title="Runs the given keyword with the given arguments, if the test failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Passed" title="Runs the given keyword with the given arguments, if the test passed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20Unless" title="Runs the given keyword with the given arguments, if `condition` is false.">Run&nbsp;Keyword&nbsp;Unless</a>
·

<a href="#Set%20Global%20Variable" title="Makes a variable available globally in all tests and suites.">Set&nbsp;Global&nbsp;Variable</a>
·

<a href="#Set%20Library%20Search%20Order" title="Sets the resolution order to use when a name matches multiple keywords.">Set&nbsp;Library&nbsp;Search&nbsp;Order</a>
·

<a href="#Set%20Log%20Level" title="Sets the log threshold to the specified level and returns the old level.">Set&nbsp;Log&nbsp;Level</a>
·

<a href="#Set%20Suite%20Variable" title="Makes a variable available everywhere within the scope of the current suite.">Set&nbsp;Suite&nbsp;Variable</a>
·

<a href="#Set%20Tags" title="Adds given `tags` for the current test or all tests in a suite.">Set&nbsp;Tags</a>
·

<a href="#Set%20Test%20Variable" title="Makes a variable available everywhere within the scope of the current test.">Set&nbsp;Test&nbsp;Variable</a>
·

<a href="#Set%20Variable" title="Returns the given argument which can then be assigned to a variable.">Set&nbsp;Variable</a>
·

<a href="#Set%20Variable%20If" title="Sets variable based on the given condition.">Set&nbsp;Variable&nbsp;If</a>
·

<a href="#Should%20Be%20Empty" title="Verifies that the given item is empty.">Should&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Be%20Equal" title="Fails if the given objects are unequal.">Should&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Be%20Equal%20As%20Integers" title="Fails if objects are unequal after converting them to integers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Be%20Equal%20As%20Numbers" title="Fails if objects are unequal after converting them to real numbers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Be%20Equal%20As%20Strings" title="Fails if objects are unequal after converting them to strings.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Be%20True" title="Fails if the given condition is not true.">Should&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Contain" title="Fails if `item1` does not contain `item2` one or more times.">Should&nbsp;Contain</a>
·

<a href="#Should%20Contain%20X%20Times" title="Fails if `item1` does not contain `item2` `count` times.">Should&nbsp;Contain&nbsp;X&nbsp;Times</a>
·

<a href="#Should%20End%20With" title="Fails if the string `str1` does not end with the string `str2`.">Should&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Match" title="Fails unless the given `string` matches the given `pattern`.">Should&nbsp;Match</a>
·

<a href="#Should%20Match%20Regexp" title="Fails if `string` does not match `pattern` as a regular expression.">Should&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Be%20Empty" title="Verifies that the given item is not empty.">Should&nbsp;Not&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Not%20Be%20Equal" title="Fails if the given objects are equal.">Should&nbsp;Not&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Integers" title="Fails if objects are equal after converting them to integers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Numbers" title="Fails if objects are equal after converting them to real numbers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Strings" title="Fails if objects are equal after converting them to strings.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Not%20Be%20True" title="Fails if the given condition is true.">Should&nbsp;Not&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Not%20Contain" title="Fails if `item1` contains `item2` one or more times.">Should&nbsp;Not&nbsp;Contain</a>
·

<a href="#Should%20Not%20End%20With" title="Fails if the string `str1` ends with the string `str2`.">Should&nbsp;Not&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Not%20Match" title="Fails if the given `string` matches the given `pattern`.">Should&nbsp;Not&nbsp;Match</a>
·

<a href="#Should%20Not%20Match%20Regexp" title="Fails if `string` matches `pattern` as a regular expression.">Should&nbsp;Not&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Start%20With" title="Fails if the string `str1` starts with the string `str2`.">Should&nbsp;Not&nbsp;Start&nbsp;With</a>
·

<a href="#Should%20Start%20With" title="Fails if the string `str1` does not start with the string `str2`.">Should&nbsp;Start&nbsp;With</a>
·

<a href="#Sleep" title="Pauses the test executed for the given time.">Sleep</a>
·

<a href="#Syslog" title="*DEPRECATED* Use `Log` keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.">Syslog</a>
·

<a href="#Variable%20Should%20Exist" title="Fails unless the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Exist</a>
·

<a href="#Variable%20Should%20Not%20Exist" title="Fails if the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Not&nbsp;Exist</a>
·

<a href="#Wait%20Until%20Keyword%20Succeeds" title="Waits until the specified keyword succeeds or the given timeout expires.">Wait&nbsp;Until&nbsp;Keyword&nbsp;Succeeds</a>


</div>
<h3>Keywords</h3>
<table class="keywords">
  <tbody><tr>
    <th class="kw">Keyword</th>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="kw" id="Call Method">Call Method</td>
    <td class="arg">object, method_name, *args</td>
    <td class="doc">Calls the named method of the given object with the provided arguments.<br>
<br>
The possible return value from the method is returned and can be assigned to a variable. Keyword fails both if the object does not have a method with the given name or if executing the method raises an exception.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Call Method</td>
<td>${hashtable}</td>
<td>put</td>
<td>myname</td>
<td>myvalue</td>
</tr>
<tr>
<td>${isempty} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>isEmpty</td>
<td></td>
</tr>
<tr>
<td>Should Not Be True</td>
<td>${isempty}</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${value} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>get</td>
<td>myname</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${value}</td>
<td>myvalue</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Catenate">Catenate</td>
    <td class="arg">*items</td>
    <td class="doc">Catenates the given items together and returns the resulted string.<br>
<br>
By default, items are catenated with spaces, but if the first item contains the string 'SEPARATOR=&lt;sep&gt;', the separator '&lt;sep&gt;' is used. Items are converted into strings when necessary.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${str1} =</td>
<td>Catenate</td>
<td>Hello</td>
<td>world</td>
<td></td>
</tr>
<tr>
<td>${str2} =</td>
<td>Catenate</td>
<td>SEPARATOR=---</td>
<td>Hello</td>
<td>world</td>
</tr>
<tr>
<td>${str3} =</td>
<td>Catenate</td>
<td>SEPARATOR=</td>
<td>Hello</td>
<td>world</td>
</tr>
</tbody></table>
=&gt;<br>
- ${str1} = 'Hello world'<br>
- ${str2} = 'Hello---world'<br>
- ${str3} = 'Helloworld'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Comment">Comment</td>
    <td class="arg">*messages</td>
    <td class="doc">Displays the given messages in the log file as keyword arguments.<br>
<br>
This keyword does nothing with the arguments it receives, but as they are visible in the log, this keyword can be used to display simple messages. Given arguments are ignored so thoroughly that they can even contain non-existing variables. If you are interested about variable values, you can use the <a href="#Log" class="name">Log</a> or <a href="#Log%20Many" class="name">Log Many</a> keywords.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Boolean">Convert To Boolean</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to Boolean true or false.<br>
<br>
Handles strings 'True' and 'False' (case-insensitive) as expected, otherwise returns item's truth value using Python's 'bool' method. For more information about truth values, see <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Integer">Convert To Integer</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to an integer number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Number">Convert To Number</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a floating point number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To String">Convert To String</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a Unicode string.<br>
<br>
Uses '__unicode__' or '__str__' method with Python objects and 'toString' with Java objects.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Create List">Create List</td>
    <td class="arg">*items</td>
    <td class="doc">Returns a list containing given items.<br>
<br>
The returned list can be assigned both to ${scalar} and @{list} variables. The earlier can be used e.g. with Java keywords expecting an array as an argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>@{list} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${scalar} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${ints} =</td>
<td>Create List</td>
<td>${1}</td>
<td>${2}</td>
<td>${3}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Evaluate">Evaluate</td>
    <td class="arg">expression, modules=None</td>
    <td class="doc">Evaluates the given expression in Python and returns the results.<br>
<br>
<span class="name">modules</span> argument can be used to specify a comma separated list of Python modules to be imported and added to the namespace of the evaluated <span class="name">expression</span>.<br>
<br>
Examples (expecting ${result} is 3.14):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status} =</td>
<td>Evaluate</td>
<td>0 &lt; ${result} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>${down} &nbsp; =</td>
<td>Evaluate</td>
<td>int(${result})</td>
<td></td>
</tr>
<tr>
<td>${up} &nbsp; &nbsp; =</td>
<td>Evaluate</td>
<td>math.ceil(${result})</td>
<td>math</td>
</tr>
<tr>
<td>${random} =</td>
<td>Evaluate</td>
<td>random.randint(0, sys.maxint)</td>
<td>random,sys</td>
</tr>
</tbody></table>
=&gt;<br>
- ${status} = True<br>
- ${down} = 3<br>
- ${up} = 4.0<br>
- ${random} = &lt;random integer&gt;<br>
<br>
Notice that instead of creating complicated expressions, it is recommended to move the logic into a test library.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Fail">Fail</td>
    <td class="arg">msg=None</td>
    <td class="doc">Fails the test immediately with the given (optional) message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Count">Get Count</td>
    <td class="arg">item1, item2</td>
    <td class="doc">Returns and logs how many times <span class="name">item2</span> is found from <span class="name">item1</span>.<br>
<br>
This keyword works with Python strings and lists and all objects that either have 'count' method or can be converted to Python lists.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${count} =</td>
<td>Get Count</td>
<td>${some item}</td>
<td>interesting value</td>
</tr>
<tr>
<td>Should Be True</td>
<td>5 &lt; ${count} &lt; 10</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Length">Get Length</td>
    <td class="arg">item</td>
    <td class="doc">Returns and logs the length of the given item.<br>
<br>
The keyword first tries to get the length with the Python function 'len', which calls the item's '__len__' method internally. If that fails, the keyword tries to call the item's 'length' and 'size' methods directly. The final attempt is trying to get the value of the item's 'length' attribute. If all these attempts are unsuccessful, the keyword fails.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Time">Get Time</td>
    <td class="arg">format=timestamp</td>
    <td class="doc">Returns the current time in the requested format.<br>
<br>
How time is returned is determined based on the given <span class="name">format</span> string as follows. Note that all checks are case-insensitive.<br>
<br>
- If <span class="name">format</span> contains the word 'epoch', the time is returned in seconds after the UNIX epoch. The return value is always an integer.<br>
<br>
- If <span class="name">format</span> contains any of the words 'year', 'month', 'day', 'hour', 'min', or 'sec', only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of words in <span class="name">format</span> is not significant. The parts are returned as zero-padded strings (e.g. May -&gt; '05').<br>
<br>
- Otherwise (and by default) the time is returned as a timestamp string in the format '2006-02-24 15:08:31'.<br>
<br>
Examples (expecting the current time is 2006-03-29 15:06:21):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${time} =</td>
<td>Get Time</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${secs} =</td>
<td>Get Time</td>
<td>epoch</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${year} =</td>
<td>Get Time</td>
<td>return year</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${yyyy}</td>
<td>${mm}</td>
<td>${dd} =</td>
<td>Get Time</td>
<td>year,month,day</td>
</tr>
<tr>
<td>@{time} =</td>
<td>Get Time</td>
<td>year month day hour min sec</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${y}</td>
<td>${s} =</td>
<td>Get Time</td>
<td>seconds and year</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${time} = '2006-03-29 15:06:21'<br>
- ${secs} = 1143637581<br>
- ${year} = '2006'<br>
- ${yyyy} = '2006', ${mm} = '03', ${dd} = '29'<br>
- @{time} = ['2006', '03', '29', '15', '06', '21']<br>
- ${y} = '2006'<br>
- ${s} = '21'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Grep">Grep</td>
    <td class="arg">text, pattern, pattern_type=literal string</td>
    <td class="doc"><b>DEPRECATED</b> Use <span class="name">Get Lines Matching XXX</span> keywords from <span class="name">String</span> library instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Library">Import Library</td>
    <td class="arg">name, *args</td>
    <td class="doc">Imports a library with the given name and optional arguments.<br>
<br>
This functionality allows dynamic importing of libraries while tests are running. That may be necessary, if the library itself is dynamic and not yet available when test data is processed. In a normal case, libraries should be imported using the Library setting in the Setting table.<br>
<br>
This keyword supports importing libraries both using library names and physical paths. When path are used, they must be given in absolute format. Starting from 2.0.2 version, forward slashes can be used as path separators in all operating systems. It is possible to use arguments as well as to give a custom name with 'WITH NAME' syntax. For more information about importing libraries, see Robot Framework User Guide.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Library</td>
<td>MyLibrary</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/Library.py</td>
<td>some</td>
<td>args</td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/../libs/Lib.java</td>
<td>arg</td>
<td>WITH NAME</td>
<td>JavaLib</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Variables">Import Variables</td>
    <td class="arg">path, *args</td>
    <td class="doc">Imports a variable file with the given path and optional arguments.<br>
<br>
Variables imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Variables setting. These variables override possible existing variables with the same names and this functionality can thus be used to import new variables, e.g. for each test in a test suite.<br>
<br>
The given path must be absolute. Starting from 2.0.2 version, forward slashes can be used as path separator regardless the operating system, but on earlier versions ${/} variable must be used instead.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Variables</td>
<td>${CURDIR}/variables.py</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Variables</td>
<td>${CURDIR}/../vars/env.py</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Length Should Be">Length Should Be</td>
    <td class="arg">item, length, msg=None</td>
    <td class="doc">Verifies that the length of the given item is correct.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log">Log</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc">Logs the given message with the given level.<br>
<br>
Valid levels are TRACE, DEBUG, INFO (default), HTML and WARN.<br>
<br>
HTML level is special because it writes the message into the log file without escaping HTML code from it. For example logging a message like '&lt;img src="image.png"&gt;' with that level creates an image, but with other levels you see just that string. &nbsp;Logging HTML messages should be used with care, because invalid messages can corrupt the whole log file. &nbsp;The actual log level used for HTML messages is INFO.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Many">Log Many</td>
    <td class="arg">*messages</td>
    <td class="doc">Logs the given messages as separate entries with the INFO level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Variables">Log Variables</td>
    <td class="arg">level=INFO</td>
    <td class="doc">Logs all variables in the current scope with given log level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="No Operation">No Operation</td>
    <td class="arg"></td>
    <td class="doc">Does absolutely nothing.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Regexp Escape">Regexp Escape</td>
    <td class="arg">*patterns</td>
    <td class="doc">Returns each argument string escaped for use as a regular expression.<br>
<br>
This keyword can be used to escape strings to be used with <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> and <a href="#Should%20Not%20Match%20Regexp" class="name">Should Not Match Regexp</a> keywords.<br>
<br>
Escaping is done with Python's re.escape() function.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${escaped} =</td>
<td>Regexp Escape</td>
<td>${original}</td>
</tr>
<tr>
<td>@{strings} =</td>
<td>Regexp Escape</td>
<td>@{strings}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Remove Tags">Remove Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Removes given <span class="name">tags</span> from the current test or all tests in a suite.<br>
<br>
Tags can be given exactly or using a pattern where '*' matches anything and '?' matches one character.<br>
<br>
This keyword can affect either one test case or all test cases in a test suite similarly as <a href="#Set%20Tags" class="name">Set Tags</a> keyword.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Remove Tags</td>
<td>mytag</td>
<td>something-*</td>
<td>?ython</td>
</tr>
</tbody></table>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Repeat Keyword">Repeat Keyword</td>
    <td class="arg">times, name, *args</td>
    <td class="doc">Executes the specified keyword multiple times.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>, and <span class="name">times</span> specifies how many the keyword should be executed. <span class="name">times</span> can be given as an integer or as a string that can be converted to an integer. It can also have postfix 'times' or 'x' (case and space insensitive) to make the expression easier to read.<br>
<br>
If <span class="name">times</span> is zero or negative, the keyword is not executed at all. This keyword fails immediately if any of the execution rounds fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Repeat Keyword</td>
<td>5 times</td>
<td>Goto Previous Page</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Repeat Keyword</td>
<td>${var}</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Replace Variables">Replace Variables</td>
    <td class="arg">text</td>
    <td class="doc">Replaces variables in the given text with their current values.<br>
<br>
If the text contains undefined variables, this keyword fails.<br>
<br>
Example:<br>
<br>
The file 'template.txt' contains 'Hello ${NAME}!' and variable '${NAME}' has the value 'Robot'.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${template} =</td>
<td>Get File</td>
<td>${CURDIR}/template.txt</td>
</tr>
<tr>
<td>${message} =</td>
<td>Replace Variables</td>
<td>${template}</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${message}</td>
<td>Hello Robot!</td>
</tr>
</tbody></table>
<br>
If the given <span class="name">text</span> contains only a single variable, its value is returned as-is. Otherwise, and always with Robot Framework 2.0.3 and earlier, this keyword returns a string.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword">Run Keyword</td>
    <td class="arg">name, *args</td>
    <td class="doc">Executes the given keyword with the given arguments.<br>
<br>
Because the name of the keyword to execute is given as an argument, it can be a variable and thus set dynamically, e.g. from a return value of another keyword or from the command line.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Expect Error">Run Keyword And Expect Error</td>
    <td class="arg">expected_error, name, *args</td>
    <td class="doc">Runs the keyword and checks that the expected error occurred.<br>
<br>
The expected error must be given in the same format as in Robot Framework reports. It can be a pattern containing characters '?', which matches to any single character and '*', which matches to any number of any characters. <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
If the expected error occurs, the error message is returned and it can be further processed/tested, if needed. If there is no error, or the error does not match the expected error, this keyword fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Run Keyword And Expect Error</td>
<td>My error</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
<tr>
<td>${msg} =</td>
<td>Run Keyword And Expect Error</td>
<td>*</td>
<td>My KW</td>
<td></td>
</tr>
<tr>
<td>Should Start With</td>
<td>${msg}</td>
<td>Once upon a time in</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Ignore Error">Run Keyword And Ignore Error</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments and ignores possible error.<br>
<br>
This keyword returns two values, so that the first is either 'PASS' or 'FAIL', depending on the status of the executed keyword. The second value is either the return value of the keyword or the received error message.<br>
<br>
The keyword name and arguments work as in <a href="#Run%20Keyword" class="name">Run Keyword</a>. See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for a usage example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If">Run Keyword If</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is true.<br>
<br>
The given <span class="name">condition</span> is evaluated similarly as with <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword, and <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
Example, a simple if/else construct:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status}</td>
<td>${value} =</td>
<td>Run Keyword And Ignore Error</td>
<td>My Keyword</td>
</tr>
<tr>
<td>Run Keyword If</td>
<td>'${status}' == 'PASS'</td>
<td>Some Action</td>
<td></td>
</tr>
<tr>
<td>Run Keyword Unless</td>
<td>'${status}' == 'PASS'</td>
<td>Another Action</td>
<td></td>
</tr>
</tbody></table>
<br>
In this example, only either 'Some Action' or 'Another Action' is executed, based on the status of 'My Keyword'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Critical Tests Passed">Run Keyword If All Critical Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all critical tests passed.<br>
<br>
This keyword can only be used in suite teardown. Trying to use it in any other place will result in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Tests Passed">Run Keyword If All Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all tests passed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Critical Tests Failed">Run Keyword If Any Critical Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if any critical tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Tests Failed">Run Keyword If Any Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if one or more tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Failed">Run Keyword If Test Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test failed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Passed">Run Keyword If Test Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test passed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword Unless">Run Keyword Unless</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is false.<br>
<br>
See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for more information and an example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Global Variable">Set Global Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available globally in all tests and suites.<br>
<br>
Variables set with this keyword are globally available in all test cases and suites executed after setting them. Setting variables with this keyword thus has the same effect as creating from the command line using the options '--variable' or '--variablefile'. Because this keyword can change variables everywhere, it should be used with care.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Library Search Order">Set Library Search Order</td>
    <td class="arg">*libraries</td>
    <td class="doc">Sets the resolution order to use when a name matches multiple keywords.<br>
<br>
The library search order is used to resolve conflicts when a keyword name in the test data matches multiple keywords. The first library containing the keyword is selected and that keyword implementation used. If keyword is not found from any library, or the library search order is not set, executing the specified keyword fails.<br>
<br>
When this keyword is used, there is no need to use the long <span class="name">LibraryName.Keyword Name</span> notation. &nbsp;For example, instead of having<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>MyLibrary.Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>MyLibrary.Another Keyword</td>
<td></td>
</tr>
<tr>
<td>MyLibrary.Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
you can have<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Library Search Order</td>
<td>MyLibrary</td>
</tr>
<tr>
<td>Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>Another Keyword</td>
<td></td>
</tr>
<tr>
<td>Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
The library search order is valid only in the suite where this keyword is used in. The old order is returned and can be used to reset the search order later.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Log Level">Set Log Level</td>
    <td class="arg">level</td>
    <td class="doc">Sets the log threshold to the specified level and returns the old level.<br>
<br>
Messages below the level will not logged. The default logging level is INFO, but it can be overridden with the command line option '--loglevel'.<br>
<br>
The available levels: TRACE, DEBUG, INFO (default), WARN and NONE (no logging).</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Suite Variable">Set Suite Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current suite.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test suite. Setting variables with this keyword thus has the same effect as creating them using the Variable table in the test data file or importing them from variable files. Other test suites, including possible child test suites, will not see variables set with this keyword.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
If a variable already exists within the new scope, its value will be overwritten. Otherwise a new variable is created. If a variable already exists within the current scope, the value can be left empty and the variable within the new scope gets the value within the current scope.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Suite Variable</td>
<td>${GREET}</td>
<td>Hello, world!</td>
</tr>
<tr>
<td>${ID} =</td>
<td>Get ID</td>
<td></td>
</tr>
<tr>
<td>Set Suite Variable</td>
<td>${ID}</td>
<td></td>
</tr>
</tbody></table>
<br>
See also <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a> and <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Tags">Set Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Adds given <span class="name">tags</span> for the current test or all tests in a suite.<br>
<br>
When this keyword is used inside a test case, that test gets the specified tags and other tests are not affected.<br>
<br>
If this keyword is used in a suite setup, all test cases in that suite, recursively, gets the given tags. It is a failure to use this keyword in a suite teardown.<br>
<br>
See <a href="#Remove%20Tags" class="name">Remove Tags</a> for another keyword to modify tags at test execution time.<br>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Test Variable">Set Test Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current test.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test case. For example, if you set a variable in a user keyword, it is available both in the test case level and also in all other user keywords used in the current test. Other test cases will not see variables set with this keyword.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable">Set Variable</td>
    <td class="arg">*values</td>
    <td class="doc">Returns the given argument which can then be assigned to a variable.<br>
<br>
This keyword is mainly used for setting scalar variables. Additionally it can be used for converting a scalar variable containing a list to a list variable or to multiple scalar variables.<br>
<br>
Using this keyword with more (or less) than one value has been deprecated in Robot Framework 2.1 and that usage will be removed in 2.2 version.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${hi} =</td>
<td>Set Variable</td>
<td>Hello, world!</td>
<td></td>
</tr>
<tr>
<td>${hi2} =</td>
<td>Set Variable</td>
<td>I said: ${hi}</td>
<td></td>
</tr>
<tr>
<td>@{list} =</td>
<td>Set Variable</td>
<td>${list with some items}</td>
<td></td>
</tr>
<tr>
<td>${item1}</td>
<td>${item2} =</td>
<td>Set Variable</td>
<td>${list with 2 items}</td>
</tr>
</tbody></table>
<br>
Variables created with this keyword are available only in the scope where they are created. See <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>, <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a> and <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for information on how to set variables so that they are available also in a larger scope.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable If">Set Variable If</td>
    <td class="arg">condition, *values</td>
    <td class="doc">Sets variable based on the given condition.<br>
<br>
The basic usage is giving a condition and two values. The given condition is first evaluated the same way as with the <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword. If the condition is true, then the first value is returned, and otherwise the second value is returned. The second value can also be omitted, in which case it has a default value None. This usage is illustrated in the examples below, where ${rc} is assumed to be zero.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var1} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
<td>nonzero</td>
</tr>
<tr>
<td>${var2} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>value1</td>
<td>value2</td>
</tr>
<tr>
<td>${var3} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>whatever</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${var1} = 'zero'<br>
- ${var2} = 'value2'<br>
- ${var3} = None<br>
<br>
Starting from Robot Framework 2.0.2 it is also possible to have 'Else If' support by replacing the second value with another condition, and having two new values after it. If the first condition is not true, the second is evaluated and one of the values after it is returned based on its truth value. This can be continued by adding more conditions without a limit.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 0</td>
<td>greater than zero</td>
<td>less then zero</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td></td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 0</td>
<td>zero</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 1</td>
<td>one</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 2</td>
<td>two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 2</td>
<td>greater than two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &lt; 0</td>
<td>less than zero</td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Empty">Should Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal">Should Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are unequal.<br>
<br>
- If <span class="name">msg</span> is not given, the error message is 'first != second'.<br>
- If <span class="name">msg</span> is given and <span class="name">values</span> is either Boolean False or the string 'False' or 'No Values', the error message is simply <span class="name">msg</span>.<br>
- Otherwise the error message is '<span class="name">msg</span>: <span class="name">first</span> != <span class="name">second</span>'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Integers">Should Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Numbers">Should Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Strings">Should Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be True">Should Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is not true.<br>
<br>
If <span class="name">condition</span> is a string (e.g. '${rc} &lt; 10'), it is evaluated as a Python expression using the built-in 'eval' function and the keyword status is decided based on the result. If a non-string item is given, the status is got directly from its truth value as explained at <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.<br>
<br>
The default error message ('&lt;condition&gt; should be true') is not very informative, but it can be overridden with the <span class="name">msg</span> argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Be True</td>
<td>${rc} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>Should Be True</td>
<td>'${status}' == 'PASS'</td>
<td># Strings must be quoted</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${number}</td>
<td># Passes if ${number} is not zero</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${list}</td>
<td># Passes if ${list} is not empty</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain">Should Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain</td>
<td>${output}</td>
<td>PASS</td>
</tr>
<tr>
<td>Should Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain X Times">Should Contain X Times</td>
    <td class="arg">item1, item2, count, msg=None</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> <span class="name">count</span> times.<br>
<br>
Works with strings, lists and all objects that <a href="#Get%20Count" class="name">Get Count</a> works with. The default error message can be overridden with <span class="name">msg</span> and the actual count is always logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain X Times</td>
<td>${output}</td>
<td>hello</td>
<td>2</td>
</tr>
<tr>
<td>Should Contain X Times</td>
<td>${some list}</td>
<td>value</td>
<td>3</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should End With">Should End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not end with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match">Should Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails unless the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern, '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match Regexp">Should Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> does not match <span class="name">pattern</span> as a regular expression.<br>
<br>
Regular expression check is done using the Python 're' module, which has a pattern syntax derived from Perl, and thus also very similar to the one in Java. See the following documents for more details about regular expressions in general and Python implementation in particular.<br>
<br>
* <a href="http://docs.python.org/lib/module-re.html">http://docs.python.org/lib/module-re.html</a><br>
* <a href="http://www.amk.ca/python/howto/regex/">http://www.amk.ca/python/howto/regex/</a><br>
<br>
Things to note about the regexp syntax in Robot Framework test data:<br>
<br>
1) Backslash is an escape character in the test data, and possible backslashes in the pattern must thus be escaped with another backslash (e.g. '\\d\\w+').<br>
<br>
2) Strings that may contain special characters, but should be handled as literal strings, can be escaped with the <a href="#Regexp%20Escape" class="name">Regexp Escape</a> keyword.<br>
<br>
3) The given pattern does not need to match the whole string. For example, the pattern 'ello' matches the string 'Hello world!'. If a full match is needed, the '^' and '$' characters can be used to denote the beginning and end of the string, respectively. For example, '^ello$' only matches the exact string 'ello'.<br>
<br>
4) Possible flags altering how the expression is parsed (e.g. re.IGNORECASE, re.MULTILINE) can be set by prefixing the pattern with the '(?iLmsux)' group (e.g. '(?im)pattern'). The available flags are 'IGNORECASE': 'i', 'MULTILINE': 'm', 'DOTALL': 's', 'VERBOSE': 'x', 'UNICODE': 'u', and 'LOCALE': 'L'.<br>
<br>
If this keyword passes, it returns the portion of the string that matched the pattern. Additionally, the possible captured groups are returned.<br>
<br>
See the <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> keyword for an explanation on how to override the default error message with the <span class="name">msg</span> and <span class="name">values</span> arguments.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>\\d{6}</td>
<td># Output contains six numbers</td>
</tr>
<tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>^\\d{6}$</td>
<td># Six numbers and nothing more</td>
</tr>
<tr>
<td>${ret} =</td>
<td>Should Match Regexp</td>
<td>Foo: 42</td>
<td>(?i)foo: \\d+</td>
</tr>
<tr>
<td>${match}</td>
<td>${group1}</td>
<td>${group2} =</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>Should Match Regexp</td>
<td>Bar: 43</td>
<td>(Foo|Bar): (\\d+)</td>
</tr>
</tbody></table>
=&gt;<br>
- ${ret} = 'Foo: 42'<br>
- ${match} = 'Bar: 43'<br>
- ${group1} = 'Bar'<br>
- ${group2} = '43'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Empty">Should Not Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is not empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal">Should Not Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are equal.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Integers">Should Not Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Numbers">Should Not Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Strings">Should Not Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be True">Should Not Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is true.<br>
<br>
See <a href="#Should%20Be%20True" class="name">Should Be True</a> for details about how <span class="name">condition</span> is evaluated and how <span class="name">msg</span> can be used to override the default error message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Contain">Should Not Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> contains <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Not Contain</td>
<td>${output}</td>
<td>FAILED</td>
</tr>
<tr>
<td>Should Not Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not End With">Should Not End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> ends with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match">Should Not Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match Regexp">Should Not Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> matches <span class="name">pattern</span> as a regular expression.<br>
<br>
See <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> for more information about arguments.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Start With">Should Not Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> starts with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Start With">Should Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not start with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Sleep">Sleep</td>
    <td class="arg">time, reason=None</td>
    <td class="doc">Pauses the test executed for the given time.<br>
<br>
<span class="name">time</span> may be either a number or a time string. Time strings are in a format such as '1 day 2 hours 3 minutes 4 seconds 5milliseconds' or '1d 2h 3m 4s 5ms', and they are fully explained in an appendix of Robot Framework User Guide. Optional <span class="name">reason</span> can be used to explain why sleeping is necessary. Both the time slept and the reason are logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Sleep</td>
<td>42</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>1.5</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>2 minutes 10 seconds</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>10s</td>
<td>Wait for a reply</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Syslog">Syslog</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc"><b>DEPRECATED</b> Use <a href="#Log" class="name">Log</a> keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Exist">Variable Should Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails unless the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Not Exist">Variable Should Not Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails if the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Wait Until Keyword Succeeds">Wait Until Keyword Succeeds</td>
    <td class="arg">timeout, retry_interval, name, *args</td>
    <td class="doc">Waits until the specified keyword succeeds or the given timeout expires.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>. If the specified keyword does not succeed within <span class="name">timeout</span>, this keyword fails. <span class="name">retry_interval</span> is the time to wait before trying to run the keyword again after the previous run has failed.<br>
<br>
Both <span class="name">timeout</span> and <span class="name">retry_interval</span> must be given in Robot Framework's time format (e.g. '1 minute', '2 min 3 s', '4.5').<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Wait Until Keyword Succeeds</td>
<td>2 min</td>
<td>5 sec</td>
<td>My keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
</tbody></table>
<div class="hr"><hr></div>
<p class="info">Altogether 72 keywords.</p>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.456 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.516 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | BuiltIn</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>BuiltIn</h2>

<p class="version"><b>Version:</b> 2.1</p>

<h3 id="introduction">Introduction</h3>
<p class="libintro">An always available standard library with often needed keywords.<br>
<br>
<span class="name">BuiltIn</span> is Robot Framework's standard library that provides a set of generic keywords needed often. It is imported automatically and thus always available. The provided keywords can be used, for example, for verifications (e.g. <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a>, <a href="#Should%20Contain" class="name">Should Contain</a>), conversions (e.g. <a href="#Convert%20To%20Integer" class="name">Convert To Integer</a>) and for various other purposes (e.g. <a href="#Log" class="name">Log</a>, <a href="#Sleep" class="name">Sleep</a>, <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a>, <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>).</p>

<h3>Shortcuts</h3>
<div class="shortcuts">

<a href="#Call%20Method" title="Calls the named method of the given object with the provided arguments.">Call&nbsp;Method</a>
·

<a href="#Catenate" title="Catenates the given items together and returns the resulted string.">Catenate</a>
·

<a href="#Comment" title="Displays the given messages in the log file as keyword arguments.">Comment</a>
·

<a href="#Convert%20To%20Boolean" title="Converts the given item to Boolean true or false.">Convert&nbsp;To&nbsp;Boolean</a>
·

<a href="#Convert%20To%20Integer" title="Converts the given item to an integer number.">Convert&nbsp;To&nbsp;Integer</a>
·

<a href="#Convert%20To%20Number" title="Converts the given item to a floating point number.">Convert&nbsp;To&nbsp;Number</a>
·

<a href="#Convert%20To%20String" title="Converts the given item to a Unicode string.">Convert&nbsp;To&nbsp;String</a>
·

<a href="#Create%20List" title="Returns a list containing given items.">Create&nbsp;List</a>
·

<a href="#Evaluate" title="Evaluates the given expression in Python and returns the results.">Evaluate</a>
·

<a href="#Fail" title="Fails the test immediately with the given (optional) message.">Fail</a>
·

<a href="#Get%20Count" title="Returns and logs how many times `item2` is found from `item1`.">Get&nbsp;Count</a>
·

<a href="#Get%20Length" title="Returns and logs the length of the given item.">Get&nbsp;Length</a>
·

<a href="#Get%20Time" title="Returns the current time in the requested format.">Get&nbsp;Time</a>
·

<a href="#Grep" title="*DEPRECATED* Use `Get Lines Matching XXX` keywords from `String` library instead. This keyword will be removed in Robot Framework 2.2.">Grep</a>
·

<a href="#Import%20Library" title="Imports a library with the given name and optional arguments.">Import&nbsp;Library</a>
·

<a href="#Import%20Variables" title="Imports a variable file with the given path and optional arguments.">Import&nbsp;Variables</a>
·

<a href="#Length%20Should%20Be" title="Verifies that the length of the given item is correct.">Length&nbsp;Should&nbsp;Be</a>
·

<a href="#Log" title="Logs the given message with the given level.">Log</a>
·

<a href="#Log%20Many" title="Logs the given messages as separate entries with the INFO level.">Log&nbsp;Many</a>
·

<a href="#Log%20Variables" title="Logs all variables in the current scope with given log level.">Log&nbsp;Variables</a>
·

<a href="#No%20Operation" title="Does absolutely nothing.">No&nbsp;Operation</a>
·

<a href="#Regexp%20Escape" title="Returns each argument string escaped for use as a regular expression.">Regexp&nbsp;Escape</a>
·

<a href="#Remove%20Tags" title="Removes given `tags` from the current test or all tests in a suite.">Remove&nbsp;Tags</a>
·

<a href="#Repeat%20Keyword" title="Executes the specified keyword multiple times.">Repeat&nbsp;Keyword</a>
·

<a href="#Replace%20Variables" title="Replaces variables in the given text with their current values.">Replace&nbsp;Variables</a>
·

<a href="#Run%20Keyword" title="Executes the given keyword with the given arguments.">Run&nbsp;Keyword</a>
·

<a href="#Run%20Keyword%20And%20Expect%20Error" title="Runs the keyword and checks that the expected error occurred.">Run&nbsp;Keyword&nbsp;And&nbsp;Expect&nbsp;Error</a>
·

<a href="#Run%20Keyword%20And%20Ignore%20Error" title="Runs the given keyword with the given arguments and ignores possible error.">Run&nbsp;Keyword&nbsp;And&nbsp;Ignore&nbsp;Error</a>
·

<a href="#Run%20Keyword%20If" title="Runs the given keyword with the given arguments, if `condition` is true.">Run&nbsp;Keyword&nbsp;If</a>
·

<a href="#Run%20Keyword%20If%20All%20Critical%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all critical tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Critical&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20All%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Critical%20Tests%20Failed" title="Runs the given keyword with the given arguments, if any critical tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Critical&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Tests%20Failed" title="Runs the given keyword with the given arguments, if one or more tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Failed" title="Runs the given keyword with the given arguments, if the test failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Passed" title="Runs the given keyword with the given arguments, if the test passed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20Unless" title="Runs the given keyword with the given arguments, if `condition` is false.">Run&nbsp;Keyword&nbsp;Unless</a>
·

<a href="#Set%20Global%20Variable" title="Makes a variable available globally in all tests and suites.">Set&nbsp;Global&nbsp;Variable</a>
·

<a href="#Set%20Library%20Search%20Order" title="Sets the resolution order to use when a name matches multiple keywords.">Set&nbsp;Library&nbsp;Search&nbsp;Order</a>
·

<a href="#Set%20Log%20Level" title="Sets the log threshold to the specified level and returns the old level.">Set&nbsp;Log&nbsp;Level</a>
·

<a href="#Set%20Suite%20Variable" title="Makes a variable available everywhere within the scope of the current suite.">Set&nbsp;Suite&nbsp;Variable</a>
·

<a href="#Set%20Tags" title="Adds given `tags` for the current test or all tests in a suite.">Set&nbsp;Tags</a>
·

<a href="#Set%20Test%20Variable" title="Makes a variable available everywhere within the scope of the current test.">Set&nbsp;Test&nbsp;Variable</a>
·

<a href="#Set%20Variable" title="Returns the given argument which can then be assigned to a variable.">Set&nbsp;Variable</a>
·

<a href="#Set%20Variable%20If" title="Sets variable based on the given condition.">Set&nbsp;Variable&nbsp;If</a>
·

<a href="#Should%20Be%20Empty" title="Verifies that the given item is empty.">Should&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Be%20Equal" title="Fails if the given objects are unequal.">Should&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Be%20Equal%20As%20Integers" title="Fails if objects are unequal after converting them to integers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Be%20Equal%20As%20Numbers" title="Fails if objects are unequal after converting them to real numbers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Be%20Equal%20As%20Strings" title="Fails if objects are unequal after converting them to strings.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Be%20True" title="Fails if the given condition is not true.">Should&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Contain" title="Fails if `item1` does not contain `item2` one or more times.">Should&nbsp;Contain</a>
·

<a href="#Should%20Contain%20X%20Times" title="Fails if `item1` does not contain `item2` `count` times.">Should&nbsp;Contain&nbsp;X&nbsp;Times</a>
·

<a href="#Should%20End%20With" title="Fails if the string `str1` does not end with the string `str2`.">Should&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Match" title="Fails unless the given `string` matches the given `pattern`.">Should&nbsp;Match</a>
·

<a href="#Should%20Match%20Regexp" title="Fails if `string` does not match `pattern` as a regular expression.">Should&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Be%20Empty" title="Verifies that the given item is not empty.">Should&nbsp;Not&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Not%20Be%20Equal" title="Fails if the given objects are equal.">Should&nbsp;Not&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Integers" title="Fails if objects are equal after converting them to integers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Numbers" title="Fails if objects are equal after converting them to real numbers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Strings" title="Fails if objects are equal after converting them to strings.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Not%20Be%20True" title="Fails if the given condition is true.">Should&nbsp;Not&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Not%20Contain" title="Fails if `item1` contains `item2` one or more times.">Should&nbsp;Not&nbsp;Contain</a>
·

<a href="#Should%20Not%20End%20With" title="Fails if the string `str1` ends with the string `str2`.">Should&nbsp;Not&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Not%20Match" title="Fails if the given `string` matches the given `pattern`.">Should&nbsp;Not&nbsp;Match</a>
·

<a href="#Should%20Not%20Match%20Regexp" title="Fails if `string` matches `pattern` as a regular expression.">Should&nbsp;Not&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Start%20With" title="Fails if the string `str1` starts with the string `str2`.">Should&nbsp;Not&nbsp;Start&nbsp;With</a>
·

<a href="#Should%20Start%20With" title="Fails if the string `str1` does not start with the string `str2`.">Should&nbsp;Start&nbsp;With</a>
·

<a href="#Sleep" title="Pauses the test executed for the given time.">Sleep</a>
·

<a href="#Syslog" title="*DEPRECATED* Use `Log` keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.">Syslog</a>
·

<a href="#Variable%20Should%20Exist" title="Fails unless the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Exist</a>
·

<a href="#Variable%20Should%20Not%20Exist" title="Fails if the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Not&nbsp;Exist</a>
·

<a href="#Wait%20Until%20Keyword%20Succeeds" title="Waits until the specified keyword succeeds or the given timeout expires.">Wait&nbsp;Until&nbsp;Keyword&nbsp;Succeeds</a>


</div>
<h3>Keywords</h3>
<table class="keywords">
  <tbody><tr>
    <th class="kw">Keyword</th>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="kw" id="Call Method">Call Method</td>
    <td class="arg">object, method_name, *args</td>
    <td class="doc">Calls the named method of the given object with the provided arguments.<br>
<br>
The possible return value from the method is returned and can be assigned to a variable. Keyword fails both if the object does not have a method with the given name or if executing the method raises an exception.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Call Method</td>
<td>${hashtable}</td>
<td>put</td>
<td>myname</td>
<td>myvalue</td>
</tr>
<tr>
<td>${isempty} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>isEmpty</td>
<td></td>
</tr>
<tr>
<td>Should Not Be True</td>
<td>${isempty}</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${value} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>get</td>
<td>myname</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${value}</td>
<td>myvalue</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Catenate">Catenate</td>
    <td class="arg">*items</td>
    <td class="doc">Catenates the given items together and returns the resulted string.<br>
<br>
By default, items are catenated with spaces, but if the first item contains the string 'SEPARATOR=&lt;sep&gt;', the separator '&lt;sep&gt;' is used. Items are converted into strings when necessary.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${str1} =</td>
<td>Catenate</td>
<td>Hello</td>
<td>world</td>
<td></td>
</tr>
<tr>
<td>${str2} =</td>
<td>Catenate</td>
<td>SEPARATOR=---</td>
<td>Hello</td>
<td>world</td>
</tr>
<tr>
<td>${str3} =</td>
<td>Catenate</td>
<td>SEPARATOR=</td>
<td>Hello</td>
<td>world</td>
</tr>
</tbody></table>
=&gt;<br>
- ${str1} = 'Hello world'<br>
- ${str2} = 'Hello---world'<br>
- ${str3} = 'Helloworld'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Comment">Comment</td>
    <td class="arg">*messages</td>
    <td class="doc">Displays the given messages in the log file as keyword arguments.<br>
<br>
This keyword does nothing with the arguments it receives, but as they are visible in the log, this keyword can be used to display simple messages. Given arguments are ignored so thoroughly that they can even contain non-existing variables. If you are interested about variable values, you can use the <a href="#Log" class="name">Log</a> or <a href="#Log%20Many" class="name">Log Many</a> keywords.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Boolean">Convert To Boolean</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to Boolean true or false.<br>
<br>
Handles strings 'True' and 'False' (case-insensitive) as expected, otherwise returns item's truth value using Python's 'bool' method. For more information about truth values, see <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Integer">Convert To Integer</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to an integer number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Number">Convert To Number</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a floating point number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To String">Convert To String</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a Unicode string.<br>
<br>
Uses '__unicode__' or '__str__' method with Python objects and 'toString' with Java objects.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Create List">Create List</td>
    <td class="arg">*items</td>
    <td class="doc">Returns a list containing given items.<br>
<br>
The returned list can be assigned both to ${scalar} and @{list} variables. The earlier can be used e.g. with Java keywords expecting an array as an argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>@{list} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${scalar} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${ints} =</td>
<td>Create List</td>
<td>${1}</td>
<td>${2}</td>
<td>${3}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Evaluate">Evaluate</td>
    <td class="arg">expression, modules=None</td>
    <td class="doc">Evaluates the given expression in Python and returns the results.<br>
<br>
<span class="name">modules</span> argument can be used to specify a comma separated list of Python modules to be imported and added to the namespace of the evaluated <span class="name">expression</span>.<br>
<br>
Examples (expecting ${result} is 3.14):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status} =</td>
<td>Evaluate</td>
<td>0 &lt; ${result} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>${down} &nbsp; =</td>
<td>Evaluate</td>
<td>int(${result})</td>
<td></td>
</tr>
<tr>
<td>${up} &nbsp; &nbsp; =</td>
<td>Evaluate</td>
<td>math.ceil(${result})</td>
<td>math</td>
</tr>
<tr>
<td>${random} =</td>
<td>Evaluate</td>
<td>random.randint(0, sys.maxint)</td>
<td>random,sys</td>
</tr>
</tbody></table>
=&gt;<br>
- ${status} = True<br>
- ${down} = 3<br>
- ${up} = 4.0<br>
- ${random} = &lt;random integer&gt;<br>
<br>
Notice that instead of creating complicated expressions, it is recommended to move the logic into a test library.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Fail">Fail</td>
    <td class="arg">msg=None</td>
    <td class="doc">Fails the test immediately with the given (optional) message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Count">Get Count</td>
    <td class="arg">item1, item2</td>
    <td class="doc">Returns and logs how many times <span class="name">item2</span> is found from <span class="name">item1</span>.<br>
<br>
This keyword works with Python strings and lists and all objects that either have 'count' method or can be converted to Python lists.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${count} =</td>
<td>Get Count</td>
<td>${some item}</td>
<td>interesting value</td>
</tr>
<tr>
<td>Should Be True</td>
<td>5 &lt; ${count} &lt; 10</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Length">Get Length</td>
    <td class="arg">item</td>
    <td class="doc">Returns and logs the length of the given item.<br>
<br>
The keyword first tries to get the length with the Python function 'len', which calls the item's '__len__' method internally. If that fails, the keyword tries to call the item's 'length' and 'size' methods directly. The final attempt is trying to get the value of the item's 'length' attribute. If all these attempts are unsuccessful, the keyword fails.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Time">Get Time</td>
    <td class="arg">format=timestamp</td>
    <td class="doc">Returns the current time in the requested format.<br>
<br>
How time is returned is determined based on the given <span class="name">format</span> string as follows. Note that all checks are case-insensitive.<br>
<br>
- If <span class="name">format</span> contains the word 'epoch', the time is returned in seconds after the UNIX epoch. The return value is always an integer.<br>
<br>
- If <span class="name">format</span> contains any of the words 'year', 'month', 'day', 'hour', 'min', or 'sec', only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of words in <span class="name">format</span> is not significant. The parts are returned as zero-padded strings (e.g. May -&gt; '05').<br>
<br>
- Otherwise (and by default) the time is returned as a timestamp string in the format '2006-02-24 15:08:31'.<br>
<br>
Examples (expecting the current time is 2006-03-29 15:06:21):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${time} =</td>
<td>Get Time</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${secs} =</td>
<td>Get Time</td>
<td>epoch</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${year} =</td>
<td>Get Time</td>
<td>return year</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${yyyy}</td>
<td>${mm}</td>
<td>${dd} =</td>
<td>Get Time</td>
<td>year,month,day</td>
</tr>
<tr>
<td>@{time} =</td>
<td>Get Time</td>
<td>year month day hour min sec</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${y}</td>
<td>${s} =</td>
<td>Get Time</td>
<td>seconds and year</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${time} = '2006-03-29 15:06:21'<br>
- ${secs} = 1143637581<br>
- ${year} = '2006'<br>
- ${yyyy} = '2006', ${mm} = '03', ${dd} = '29'<br>
- @{time} = ['2006', '03', '29', '15', '06', '21']<br>
- ${y} = '2006'<br>
- ${s} = '21'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Grep">Grep</td>
    <td class="arg">text, pattern, pattern_type=literal string</td>
    <td class="doc"><b>DEPRECATED</b> Use <span class="name">Get Lines Matching XXX</span> keywords from <span class="name">String</span> library instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Library">Import Library</td>
    <td class="arg">name, *args</td>
    <td class="doc">Imports a library with the given name and optional arguments.<br>
<br>
This functionality allows dynamic importing of libraries while tests are running. That may be necessary, if the library itself is dynamic and not yet available when test data is processed. In a normal case, libraries should be imported using the Library setting in the Setting table.<br>
<br>
This keyword supports importing libraries both using library names and physical paths. When path are used, they must be given in absolute format. Starting from 2.0.2 version, forward slashes can be used as path separators in all operating systems. It is possible to use arguments as well as to give a custom name with 'WITH NAME' syntax. For more information about importing libraries, see Robot Framework User Guide.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Library</td>
<td>MyLibrary</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/Library.py</td>
<td>some</td>
<td>args</td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/../libs/Lib.java</td>
<td>arg</td>
<td>WITH NAME</td>
<td>JavaLib</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Variables">Import Variables</td>
    <td class="arg">path, *args</td>
    <td class="doc">Imports a variable file with the given path and optional arguments.<br>
<br>
Variables imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Variables setting. These variables override possible existing variables with the same names and this functionality can thus be used to import new variables, e.g. for each test in a test suite.<br>
<br>
The given path must be absolute. Starting from 2.0.2 version, forward slashes can be used as path separator regardless the operating system, but on earlier versions ${/} variable must be used instead.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Variables</td>
<td>${CURDIR}/variables.py</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Variables</td>
<td>${CURDIR}/../vars/env.py</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Length Should Be">Length Should Be</td>
    <td class="arg">item, length, msg=None</td>
    <td class="doc">Verifies that the length of the given item is correct.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log">Log</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc">Logs the given message with the given level.<br>
<br>
Valid levels are TRACE, DEBUG, INFO (default), HTML and WARN.<br>
<br>
HTML level is special because it writes the message into the log file without escaping HTML code from it. For example logging a message like '&lt;img src="image.png"&gt;' with that level creates an image, but with other levels you see just that string. &nbsp;Logging HTML messages should be used with care, because invalid messages can corrupt the whole log file. &nbsp;The actual log level used for HTML messages is INFO.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Many">Log Many</td>
    <td class="arg">*messages</td>
    <td class="doc">Logs the given messages as separate entries with the INFO level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Variables">Log Variables</td>
    <td class="arg">level=INFO</td>
    <td class="doc">Logs all variables in the current scope with given log level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="No Operation">No Operation</td>
    <td class="arg"></td>
    <td class="doc">Does absolutely nothing.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Regexp Escape">Regexp Escape</td>
    <td class="arg">*patterns</td>
    <td class="doc">Returns each argument string escaped for use as a regular expression.<br>
<br>
This keyword can be used to escape strings to be used with <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> and <a href="#Should%20Not%20Match%20Regexp" class="name">Should Not Match Regexp</a> keywords.<br>
<br>
Escaping is done with Python's re.escape() function.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${escaped} =</td>
<td>Regexp Escape</td>
<td>${original}</td>
</tr>
<tr>
<td>@{strings} =</td>
<td>Regexp Escape</td>
<td>@{strings}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Remove Tags">Remove Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Removes given <span class="name">tags</span> from the current test or all tests in a suite.<br>
<br>
Tags can be given exactly or using a pattern where '*' matches anything and '?' matches one character.<br>
<br>
This keyword can affect either one test case or all test cases in a test suite similarly as <a href="#Set%20Tags" class="name">Set Tags</a> keyword.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Remove Tags</td>
<td>mytag</td>
<td>something-*</td>
<td>?ython</td>
</tr>
</tbody></table>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Repeat Keyword">Repeat Keyword</td>
    <td class="arg">times, name, *args</td>
    <td class="doc">Executes the specified keyword multiple times.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>, and <span class="name">times</span> specifies how many the keyword should be executed. <span class="name">times</span> can be given as an integer or as a string that can be converted to an integer. It can also have postfix 'times' or 'x' (case and space insensitive) to make the expression easier to read.<br>
<br>
If <span class="name">times</span> is zero or negative, the keyword is not executed at all. This keyword fails immediately if any of the execution rounds fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Repeat Keyword</td>
<td>5 times</td>
<td>Goto Previous Page</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Repeat Keyword</td>
<td>${var}</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Replace Variables">Replace Variables</td>
    <td class="arg">text</td>
    <td class="doc">Replaces variables in the given text with their current values.<br>
<br>
If the text contains undefined variables, this keyword fails.<br>
<br>
Example:<br>
<br>
The file 'template.txt' contains 'Hello ${NAME}!' and variable '${NAME}' has the value 'Robot'.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${template} =</td>
<td>Get File</td>
<td>${CURDIR}/template.txt</td>
</tr>
<tr>
<td>${message} =</td>
<td>Replace Variables</td>
<td>${template}</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${message}</td>
<td>Hello Robot!</td>
</tr>
</tbody></table>
<br>
If the given <span class="name">text</span> contains only a single variable, its value is returned as-is. Otherwise, and always with Robot Framework 2.0.3 and earlier, this keyword returns a string.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword">Run Keyword</td>
    <td class="arg">name, *args</td>
    <td class="doc">Executes the given keyword with the given arguments.<br>
<br>
Because the name of the keyword to execute is given as an argument, it can be a variable and thus set dynamically, e.g. from a return value of another keyword or from the command line.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Expect Error">Run Keyword And Expect Error</td>
    <td class="arg">expected_error, name, *args</td>
    <td class="doc">Runs the keyword and checks that the expected error occurred.<br>
<br>
The expected error must be given in the same format as in Robot Framework reports. It can be a pattern containing characters '?', which matches to any single character and '*', which matches to any number of any characters. <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
If the expected error occurs, the error message is returned and it can be further processed/tested, if needed. If there is no error, or the error does not match the expected error, this keyword fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Run Keyword And Expect Error</td>
<td>My error</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
<tr>
<td>${msg} =</td>
<td>Run Keyword And Expect Error</td>
<td>*</td>
<td>My KW</td>
<td></td>
</tr>
<tr>
<td>Should Start With</td>
<td>${msg}</td>
<td>Once upon a time in</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Ignore Error">Run Keyword And Ignore Error</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments and ignores possible error.<br>
<br>
This keyword returns two values, so that the first is either 'PASS' or 'FAIL', depending on the status of the executed keyword. The second value is either the return value of the keyword or the received error message.<br>
<br>
The keyword name and arguments work as in <a href="#Run%20Keyword" class="name">Run Keyword</a>. See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for a usage example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If">Run Keyword If</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is true.<br>
<br>
The given <span class="name">condition</span> is evaluated similarly as with <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword, and <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
Example, a simple if/else construct:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status}</td>
<td>${value} =</td>
<td>Run Keyword And Ignore Error</td>
<td>My Keyword</td>
</tr>
<tr>
<td>Run Keyword If</td>
<td>'${status}' == 'PASS'</td>
<td>Some Action</td>
<td></td>
</tr>
<tr>
<td>Run Keyword Unless</td>
<td>'${status}' == 'PASS'</td>
<td>Another Action</td>
<td></td>
</tr>
</tbody></table>
<br>
In this example, only either 'Some Action' or 'Another Action' is executed, based on the status of 'My Keyword'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Critical Tests Passed">Run Keyword If All Critical Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all critical tests passed.<br>
<br>
This keyword can only be used in suite teardown. Trying to use it in any other place will result in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Tests Passed">Run Keyword If All Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all tests passed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Critical Tests Failed">Run Keyword If Any Critical Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if any critical tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Tests Failed">Run Keyword If Any Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if one or more tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Failed">Run Keyword If Test Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test failed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Passed">Run Keyword If Test Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test passed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword Unless">Run Keyword Unless</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is false.<br>
<br>
See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for more information and an example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Global Variable">Set Global Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available globally in all tests and suites.<br>
<br>
Variables set with this keyword are globally available in all test cases and suites executed after setting them. Setting variables with this keyword thus has the same effect as creating from the command line using the options '--variable' or '--variablefile'. Because this keyword can change variables everywhere, it should be used with care.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Library Search Order">Set Library Search Order</td>
    <td class="arg">*libraries</td>
    <td class="doc">Sets the resolution order to use when a name matches multiple keywords.<br>
<br>
The library search order is used to resolve conflicts when a keyword name in the test data matches multiple keywords. The first library containing the keyword is selected and that keyword implementation used. If keyword is not found from any library, or the library search order is not set, executing the specified keyword fails.<br>
<br>
When this keyword is used, there is no need to use the long <span class="name">LibraryName.Keyword Name</span> notation. &nbsp;For example, instead of having<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>MyLibrary.Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>MyLibrary.Another Keyword</td>
<td></td>
</tr>
<tr>
<td>MyLibrary.Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
you can have<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Library Search Order</td>
<td>MyLibrary</td>
</tr>
<tr>
<td>Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>Another Keyword</td>
<td></td>
</tr>
<tr>
<td>Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
The library search order is valid only in the suite where this keyword is used in. The old order is returned and can be used to reset the search order later.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Log Level">Set Log Level</td>
    <td class="arg">level</td>
    <td class="doc">Sets the log threshold to the specified level and returns the old level.<br>
<br>
Messages below the level will not logged. The default logging level is INFO, but it can be overridden with the command line option '--loglevel'.<br>
<br>
The available levels: TRACE, DEBUG, INFO (default), WARN and NONE (no logging).</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Suite Variable">Set Suite Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current suite.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test suite. Setting variables with this keyword thus has the same effect as creating them using the Variable table in the test data file or importing them from variable files. Other test suites, including possible child test suites, will not see variables set with this keyword.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
If a variable already exists within the new scope, its value will be overwritten. Otherwise a new variable is created. If a variable already exists within the current scope, the value can be left empty and the variable within the new scope gets the value within the current scope.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Suite Variable</td>
<td>${GREET}</td>
<td>Hello, world!</td>
</tr>
<tr>
<td>${ID} =</td>
<td>Get ID</td>
<td></td>
</tr>
<tr>
<td>Set Suite Variable</td>
<td>${ID}</td>
<td></td>
</tr>
</tbody></table>
<br>
See also <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a> and <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Tags">Set Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Adds given <span class="name">tags</span> for the current test or all tests in a suite.<br>
<br>
When this keyword is used inside a test case, that test gets the specified tags and other tests are not affected.<br>
<br>
If this keyword is used in a suite setup, all test cases in that suite, recursively, gets the given tags. It is a failure to use this keyword in a suite teardown.<br>
<br>
See <a href="#Remove%20Tags" class="name">Remove Tags</a> for another keyword to modify tags at test execution time.<br>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Test Variable">Set Test Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current test.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test case. For example, if you set a variable in a user keyword, it is available both in the test case level and also in all other user keywords used in the current test. Other test cases will not see variables set with this keyword.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable">Set Variable</td>
    <td class="arg">*values</td>
    <td class="doc">Returns the given argument which can then be assigned to a variable.<br>
<br>
This keyword is mainly used for setting scalar variables. Additionally it can be used for converting a scalar variable containing a list to a list variable or to multiple scalar variables.<br>
<br>
Using this keyword with more (or less) than one value has been deprecated in Robot Framework 2.1 and that usage will be removed in 2.2 version.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${hi} =</td>
<td>Set Variable</td>
<td>Hello, world!</td>
<td></td>
</tr>
<tr>
<td>${hi2} =</td>
<td>Set Variable</td>
<td>I said: ${hi}</td>
<td></td>
</tr>
<tr>
<td>@{list} =</td>
<td>Set Variable</td>
<td>${list with some items}</td>
<td></td>
</tr>
<tr>
<td>${item1}</td>
<td>${item2} =</td>
<td>Set Variable</td>
<td>${list with 2 items}</td>
</tr>
</tbody></table>
<br>
Variables created with this keyword are available only in the scope where they are created. See <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>, <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a> and <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for information on how to set variables so that they are available also in a larger scope.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable If">Set Variable If</td>
    <td class="arg">condition, *values</td>
    <td class="doc">Sets variable based on the given condition.<br>
<br>
The basic usage is giving a condition and two values. The given condition is first evaluated the same way as with the <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword. If the condition is true, then the first value is returned, and otherwise the second value is returned. The second value can also be omitted, in which case it has a default value None. This usage is illustrated in the examples below, where ${rc} is assumed to be zero.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var1} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
<td>nonzero</td>
</tr>
<tr>
<td>${var2} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>value1</td>
<td>value2</td>
</tr>
<tr>
<td>${var3} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>whatever</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${var1} = 'zero'<br>
- ${var2} = 'value2'<br>
- ${var3} = None<br>
<br>
Starting from Robot Framework 2.0.2 it is also possible to have 'Else If' support by replacing the second value with another condition, and having two new values after it. If the first condition is not true, the second is evaluated and one of the values after it is returned based on its truth value. This can be continued by adding more conditions without a limit.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 0</td>
<td>greater than zero</td>
<td>less then zero</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td></td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 0</td>
<td>zero</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 1</td>
<td>one</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 2</td>
<td>two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 2</td>
<td>greater than two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &lt; 0</td>
<td>less than zero</td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Empty">Should Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal">Should Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are unequal.<br>
<br>
- If <span class="name">msg</span> is not given, the error message is 'first != second'.<br>
- If <span class="name">msg</span> is given and <span class="name">values</span> is either Boolean False or the string 'False' or 'No Values', the error message is simply <span class="name">msg</span>.<br>
- Otherwise the error message is '<span class="name">msg</span>: <span class="name">first</span> != <span class="name">second</span>'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Integers">Should Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Numbers">Should Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Strings">Should Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be True">Should Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is not true.<br>
<br>
If <span class="name">condition</span> is a string (e.g. '${rc} &lt; 10'), it is evaluated as a Python expression using the built-in 'eval' function and the keyword status is decided based on the result. If a non-string item is given, the status is got directly from its truth value as explained at <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.<br>
<br>
The default error message ('&lt;condition&gt; should be true') is not very informative, but it can be overridden with the <span class="name">msg</span> argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Be True</td>
<td>${rc} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>Should Be True</td>
<td>'${status}' == 'PASS'</td>
<td># Strings must be quoted</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${number}</td>
<td># Passes if ${number} is not zero</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${list}</td>
<td># Passes if ${list} is not empty</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain">Should Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain</td>
<td>${output}</td>
<td>PASS</td>
</tr>
<tr>
<td>Should Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain X Times">Should Contain X Times</td>
    <td class="arg">item1, item2, count, msg=None</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> <span class="name">count</span> times.<br>
<br>
Works with strings, lists and all objects that <a href="#Get%20Count" class="name">Get Count</a> works with. The default error message can be overridden with <span class="name">msg</span> and the actual count is always logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain X Times</td>
<td>${output}</td>
<td>hello</td>
<td>2</td>
</tr>
<tr>
<td>Should Contain X Times</td>
<td>${some list}</td>
<td>value</td>
<td>3</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should End With">Should End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not end with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match">Should Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails unless the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern, '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match Regexp">Should Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> does not match <span class="name">pattern</span> as a regular expression.<br>
<br>
Regular expression check is done using the Python 're' module, which has a pattern syntax derived from Perl, and thus also very similar to the one in Java. See the following documents for more details about regular expressions in general and Python implementation in particular.<br>
<br>
* <a href="http://docs.python.org/lib/module-re.html">http://docs.python.org/lib/module-re.html</a><br>
* <a href="http://www.amk.ca/python/howto/regex/">http://www.amk.ca/python/howto/regex/</a><br>
<br>
Things to note about the regexp syntax in Robot Framework test data:<br>
<br>
1) Backslash is an escape character in the test data, and possible backslashes in the pattern must thus be escaped with another backslash (e.g. '\\d\\w+').<br>
<br>
2) Strings that may contain special characters, but should be handled as literal strings, can be escaped with the <a href="#Regexp%20Escape" class="name">Regexp Escape</a> keyword.<br>
<br>
3) The given pattern does not need to match the whole string. For example, the pattern 'ello' matches the string 'Hello world!'. If a full match is needed, the '^' and '$' characters can be used to denote the beginning and end of the string, respectively. For example, '^ello$' only matches the exact string 'ello'.<br>
<br>
4) Possible flags altering how the expression is parsed (e.g. re.IGNORECASE, re.MULTILINE) can be set by prefixing the pattern with the '(?iLmsux)' group (e.g. '(?im)pattern'). The available flags are 'IGNORECASE': 'i', 'MULTILINE': 'm', 'DOTALL': 's', 'VERBOSE': 'x', 'UNICODE': 'u', and 'LOCALE': 'L'.<br>
<br>
If this keyword passes, it returns the portion of the string that matched the pattern. Additionally, the possible captured groups are returned.<br>
<br>
See the <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> keyword for an explanation on how to override the default error message with the <span class="name">msg</span> and <span class="name">values</span> arguments.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>\\d{6}</td>
<td># Output contains six numbers</td>
</tr>
<tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>^\\d{6}$</td>
<td># Six numbers and nothing more</td>
</tr>
<tr>
<td>${ret} =</td>
<td>Should Match Regexp</td>
<td>Foo: 42</td>
<td>(?i)foo: \\d+</td>
</tr>
<tr>
<td>${match}</td>
<td>${group1}</td>
<td>${group2} =</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>Should Match Regexp</td>
<td>Bar: 43</td>
<td>(Foo|Bar): (\\d+)</td>
</tr>
</tbody></table>
=&gt;<br>
- ${ret} = 'Foo: 42'<br>
- ${match} = 'Bar: 43'<br>
- ${group1} = 'Bar'<br>
- ${group2} = '43'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Empty">Should Not Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is not empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal">Should Not Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are equal.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Integers">Should Not Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Numbers">Should Not Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Strings">Should Not Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be True">Should Not Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is true.<br>
<br>
See <a href="#Should%20Be%20True" class="name">Should Be True</a> for details about how <span class="name">condition</span> is evaluated and how <span class="name">msg</span> can be used to override the default error message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Contain">Should Not Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> contains <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Not Contain</td>
<td>${output}</td>
<td>FAILED</td>
</tr>
<tr>
<td>Should Not Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not End With">Should Not End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> ends with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match">Should Not Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match Regexp">Should Not Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> matches <span class="name">pattern</span> as a regular expression.<br>
<br>
See <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> for more information about arguments.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Start With">Should Not Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> starts with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Start With">Should Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not start with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Sleep">Sleep</td>
    <td class="arg">time, reason=None</td>
    <td class="doc">Pauses the test executed for the given time.<br>
<br>
<span class="name">time</span> may be either a number or a time string. Time strings are in a format such as '1 day 2 hours 3 minutes 4 seconds 5milliseconds' or '1d 2h 3m 4s 5ms', and they are fully explained in an appendix of Robot Framework User Guide. Optional <span class="name">reason</span> can be used to explain why sleeping is necessary. Both the time slept and the reason are logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Sleep</td>
<td>42</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>1.5</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>2 minutes 10 seconds</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>10s</td>
<td>Wait for a reply</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Syslog">Syslog</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc"><b>DEPRECATED</b> Use <a href="#Log" class="name">Log</a> keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Exist">Variable Should Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails unless the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Not Exist">Variable Should Not Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails if the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Wait Until Keyword Succeeds">Wait Until Keyword Succeeds</td>
    <td class="arg">timeout, retry_interval, name, *args</td>
    <td class="doc">Waits until the specified keyword succeeds or the given timeout expires.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>. If the specified keyword does not succeed within <span class="name">timeout</span>, this keyword fails. <span class="name">retry_interval</span> is the time to wait before trying to run the keyword again after the previous run has failed.<br>
<br>
Both <span class="name">timeout</span> and <span class="name">retry_interval</span> must be given in Robot Framework's time format (e.g. '1 minute', '2 min 3 s', '4.5').<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Wait Until Keyword Succeeds</td>
<td>2 min</td>
<td>5 sec</td>
<td>My keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
</tbody></table>
<div class="hr"><hr></div>
<p class="info">Altogether 72 keywords.</p>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.536 INFO - Command request: open[http://localhost:8001/lib/BuiltIn, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.753 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.756 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.786 INFO - Got result: OK,RFDoc | BuiltIn on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.791 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.838 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | BuiltIn</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>BuiltIn</h2>

<p class="version"><b>Version:</b> 2.1</p>

<h3 id="introduction">Introduction</h3>
<p class="libintro">An always available standard library with often needed keywords.<br>
<br>
<span class="name">BuiltIn</span> is Robot Framework's standard library that provides a set of generic keywords needed often. It is imported automatically and thus always available. The provided keywords can be used, for example, for verifications (e.g. <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a>, <a href="#Should%20Contain" class="name">Should Contain</a>), conversions (e.g. <a href="#Convert%20To%20Integer" class="name">Convert To Integer</a>) and for various other purposes (e.g. <a href="#Log" class="name">Log</a>, <a href="#Sleep" class="name">Sleep</a>, <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a>, <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>).</p>

<h3>Shortcuts</h3>
<div class="shortcuts">

<a href="#Call%20Method" title="Calls the named method of the given object with the provided arguments.">Call&nbsp;Method</a>
·

<a href="#Catenate" title="Catenates the given items together and returns the resulted string.">Catenate</a>
·

<a href="#Comment" title="Displays the given messages in the log file as keyword arguments.">Comment</a>
·

<a href="#Convert%20To%20Boolean" title="Converts the given item to Boolean true or false.">Convert&nbsp;To&nbsp;Boolean</a>
·

<a href="#Convert%20To%20Integer" title="Converts the given item to an integer number.">Convert&nbsp;To&nbsp;Integer</a>
·

<a href="#Convert%20To%20Number" title="Converts the given item to a floating point number.">Convert&nbsp;To&nbsp;Number</a>
·

<a href="#Convert%20To%20String" title="Converts the given item to a Unicode string.">Convert&nbsp;To&nbsp;String</a>
·

<a href="#Create%20List" title="Returns a list containing given items.">Create&nbsp;List</a>
·

<a href="#Evaluate" title="Evaluates the given expression in Python and returns the results.">Evaluate</a>
·

<a href="#Fail" title="Fails the test immediately with the given (optional) message.">Fail</a>
·

<a href="#Get%20Count" title="Returns and logs how many times `item2` is found from `item1`.">Get&nbsp;Count</a>
·

<a href="#Get%20Length" title="Returns and logs the length of the given item.">Get&nbsp;Length</a>
·

<a href="#Get%20Time" title="Returns the current time in the requested format.">Get&nbsp;Time</a>
·

<a href="#Grep" title="*DEPRECATED* Use `Get Lines Matching XXX` keywords from `String` library instead. This keyword will be removed in Robot Framework 2.2.">Grep</a>
·

<a href="#Import%20Library" title="Imports a library with the given name and optional arguments.">Import&nbsp;Library</a>
·

<a href="#Import%20Variables" title="Imports a variable file with the given path and optional arguments.">Import&nbsp;Variables</a>
·

<a href="#Length%20Should%20Be" title="Verifies that the length of the given item is correct.">Length&nbsp;Should&nbsp;Be</a>
·

<a href="#Log" title="Logs the given message with the given level.">Log</a>
·

<a href="#Log%20Many" title="Logs the given messages as separate entries with the INFO level.">Log&nbsp;Many</a>
·

<a href="#Log%20Variables" title="Logs all variables in the current scope with given log level.">Log&nbsp;Variables</a>
·

<a href="#No%20Operation" title="Does absolutely nothing.">No&nbsp;Operation</a>
·

<a href="#Regexp%20Escape" title="Returns each argument string escaped for use as a regular expression.">Regexp&nbsp;Escape</a>
·

<a href="#Remove%20Tags" title="Removes given `tags` from the current test or all tests in a suite.">Remove&nbsp;Tags</a>
·

<a href="#Repeat%20Keyword" title="Executes the specified keyword multiple times.">Repeat&nbsp;Keyword</a>
·

<a href="#Replace%20Variables" title="Replaces variables in the given text with their current values.">Replace&nbsp;Variables</a>
·

<a href="#Run%20Keyword" title="Executes the given keyword with the given arguments.">Run&nbsp;Keyword</a>
·

<a href="#Run%20Keyword%20And%20Expect%20Error" title="Runs the keyword and checks that the expected error occurred.">Run&nbsp;Keyword&nbsp;And&nbsp;Expect&nbsp;Error</a>
·

<a href="#Run%20Keyword%20And%20Ignore%20Error" title="Runs the given keyword with the given arguments and ignores possible error.">Run&nbsp;Keyword&nbsp;And&nbsp;Ignore&nbsp;Error</a>
·

<a href="#Run%20Keyword%20If" title="Runs the given keyword with the given arguments, if `condition` is true.">Run&nbsp;Keyword&nbsp;If</a>
·

<a href="#Run%20Keyword%20If%20All%20Critical%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all critical tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Critical&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20All%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Critical%20Tests%20Failed" title="Runs the given keyword with the given arguments, if any critical tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Critical&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Tests%20Failed" title="Runs the given keyword with the given arguments, if one or more tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Failed" title="Runs the given keyword with the given arguments, if the test failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Passed" title="Runs the given keyword with the given arguments, if the test passed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20Unless" title="Runs the given keyword with the given arguments, if `condition` is false.">Run&nbsp;Keyword&nbsp;Unless</a>
·

<a href="#Set%20Global%20Variable" title="Makes a variable available globally in all tests and suites.">Set&nbsp;Global&nbsp;Variable</a>
·

<a href="#Set%20Library%20Search%20Order" title="Sets the resolution order to use when a name matches multiple keywords.">Set&nbsp;Library&nbsp;Search&nbsp;Order</a>
·

<a href="#Set%20Log%20Level" title="Sets the log threshold to the specified level and returns the old level.">Set&nbsp;Log&nbsp;Level</a>
·

<a href="#Set%20Suite%20Variable" title="Makes a variable available everywhere within the scope of the current suite.">Set&nbsp;Suite&nbsp;Variable</a>
·

<a href="#Set%20Tags" title="Adds given `tags` for the current test or all tests in a suite.">Set&nbsp;Tags</a>
·

<a href="#Set%20Test%20Variable" title="Makes a variable available everywhere within the scope of the current test.">Set&nbsp;Test&nbsp;Variable</a>
·

<a href="#Set%20Variable" title="Returns the given argument which can then be assigned to a variable.">Set&nbsp;Variable</a>
·

<a href="#Set%20Variable%20If" title="Sets variable based on the given condition.">Set&nbsp;Variable&nbsp;If</a>
·

<a href="#Should%20Be%20Empty" title="Verifies that the given item is empty.">Should&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Be%20Equal" title="Fails if the given objects are unequal.">Should&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Be%20Equal%20As%20Integers" title="Fails if objects are unequal after converting them to integers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Be%20Equal%20As%20Numbers" title="Fails if objects are unequal after converting them to real numbers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Be%20Equal%20As%20Strings" title="Fails if objects are unequal after converting them to strings.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Be%20True" title="Fails if the given condition is not true.">Should&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Contain" title="Fails if `item1` does not contain `item2` one or more times.">Should&nbsp;Contain</a>
·

<a href="#Should%20Contain%20X%20Times" title="Fails if `item1` does not contain `item2` `count` times.">Should&nbsp;Contain&nbsp;X&nbsp;Times</a>
·

<a href="#Should%20End%20With" title="Fails if the string `str1` does not end with the string `str2`.">Should&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Match" title="Fails unless the given `string` matches the given `pattern`.">Should&nbsp;Match</a>
·

<a href="#Should%20Match%20Regexp" title="Fails if `string` does not match `pattern` as a regular expression.">Should&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Be%20Empty" title="Verifies that the given item is not empty.">Should&nbsp;Not&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Not%20Be%20Equal" title="Fails if the given objects are equal.">Should&nbsp;Not&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Integers" title="Fails if objects are equal after converting them to integers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Numbers" title="Fails if objects are equal after converting them to real numbers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Strings" title="Fails if objects are equal after converting them to strings.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Not%20Be%20True" title="Fails if the given condition is true.">Should&nbsp;Not&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Not%20Contain" title="Fails if `item1` contains `item2` one or more times.">Should&nbsp;Not&nbsp;Contain</a>
·

<a href="#Should%20Not%20End%20With" title="Fails if the string `str1` ends with the string `str2`.">Should&nbsp;Not&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Not%20Match" title="Fails if the given `string` matches the given `pattern`.">Should&nbsp;Not&nbsp;Match</a>
·

<a href="#Should%20Not%20Match%20Regexp" title="Fails if `string` matches `pattern` as a regular expression.">Should&nbsp;Not&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Start%20With" title="Fails if the string `str1` starts with the string `str2`.">Should&nbsp;Not&nbsp;Start&nbsp;With</a>
·

<a href="#Should%20Start%20With" title="Fails if the string `str1` does not start with the string `str2`.">Should&nbsp;Start&nbsp;With</a>
·

<a href="#Sleep" title="Pauses the test executed for the given time.">Sleep</a>
·

<a href="#Syslog" title="*DEPRECATED* Use `Log` keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.">Syslog</a>
·

<a href="#Variable%20Should%20Exist" title="Fails unless the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Exist</a>
·

<a href="#Variable%20Should%20Not%20Exist" title="Fails if the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Not&nbsp;Exist</a>
·

<a href="#Wait%20Until%20Keyword%20Succeeds" title="Waits until the specified keyword succeeds or the given timeout expires.">Wait&nbsp;Until&nbsp;Keyword&nbsp;Succeeds</a>


</div>
<h3>Keywords</h3>
<table class="keywords">
  <tbody><tr>
    <th class="kw">Keyword</th>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="kw" id="Call Method">Call Method</td>
    <td class="arg">object, method_name, *args</td>
    <td class="doc">Calls the named method of the given object with the provided arguments.<br>
<br>
The possible return value from the method is returned and can be assigned to a variable. Keyword fails both if the object does not have a method with the given name or if executing the method raises an exception.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Call Method</td>
<td>${hashtable}</td>
<td>put</td>
<td>myname</td>
<td>myvalue</td>
</tr>
<tr>
<td>${isempty} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>isEmpty</td>
<td></td>
</tr>
<tr>
<td>Should Not Be True</td>
<td>${isempty}</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${value} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>get</td>
<td>myname</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${value}</td>
<td>myvalue</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Catenate">Catenate</td>
    <td class="arg">*items</td>
    <td class="doc">Catenates the given items together and returns the resulted string.<br>
<br>
By default, items are catenated with spaces, but if the first item contains the string 'SEPARATOR=&lt;sep&gt;', the separator '&lt;sep&gt;' is used. Items are converted into strings when necessary.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${str1} =</td>
<td>Catenate</td>
<td>Hello</td>
<td>world</td>
<td></td>
</tr>
<tr>
<td>${str2} =</td>
<td>Catenate</td>
<td>SEPARATOR=---</td>
<td>Hello</td>
<td>world</td>
</tr>
<tr>
<td>${str3} =</td>
<td>Catenate</td>
<td>SEPARATOR=</td>
<td>Hello</td>
<td>world</td>
</tr>
</tbody></table>
=&gt;<br>
- ${str1} = 'Hello world'<br>
- ${str2} = 'Hello---world'<br>
- ${str3} = 'Helloworld'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Comment">Comment</td>
    <td class="arg">*messages</td>
    <td class="doc">Displays the given messages in the log file as keyword arguments.<br>
<br>
This keyword does nothing with the arguments it receives, but as they are visible in the log, this keyword can be used to display simple messages. Given arguments are ignored so thoroughly that they can even contain non-existing variables. If you are interested about variable values, you can use the <a href="#Log" class="name">Log</a> or <a href="#Log%20Many" class="name">Log Many</a> keywords.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Boolean">Convert To Boolean</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to Boolean true or false.<br>
<br>
Handles strings 'True' and 'False' (case-insensitive) as expected, otherwise returns item's truth value using Python's 'bool' method. For more information about truth values, see <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Integer">Convert To Integer</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to an integer number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Number">Convert To Number</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a floating point number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To String">Convert To String</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a Unicode string.<br>
<br>
Uses '__unicode__' or '__str__' method with Python objects and 'toString' with Java objects.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Create List">Create List</td>
    <td class="arg">*items</td>
    <td class="doc">Returns a list containing given items.<br>
<br>
The returned list can be assigned both to ${scalar} and @{list} variables. The earlier can be used e.g. with Java keywords expecting an array as an argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>@{list} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${scalar} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${ints} =</td>
<td>Create List</td>
<td>${1}</td>
<td>${2}</td>
<td>${3}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Evaluate">Evaluate</td>
    <td class="arg">expression, modules=None</td>
    <td class="doc">Evaluates the given expression in Python and returns the results.<br>
<br>
<span class="name">modules</span> argument can be used to specify a comma separated list of Python modules to be imported and added to the namespace of the evaluated <span class="name">expression</span>.<br>
<br>
Examples (expecting ${result} is 3.14):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status} =</td>
<td>Evaluate</td>
<td>0 &lt; ${result} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>${down} &nbsp; =</td>
<td>Evaluate</td>
<td>int(${result})</td>
<td></td>
</tr>
<tr>
<td>${up} &nbsp; &nbsp; =</td>
<td>Evaluate</td>
<td>math.ceil(${result})</td>
<td>math</td>
</tr>
<tr>
<td>${random} =</td>
<td>Evaluate</td>
<td>random.randint(0, sys.maxint)</td>
<td>random,sys</td>
</tr>
</tbody></table>
=&gt;<br>
- ${status} = True<br>
- ${down} = 3<br>
- ${up} = 4.0<br>
- ${random} = &lt;random integer&gt;<br>
<br>
Notice that instead of creating complicated expressions, it is recommended to move the logic into a test library.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Fail">Fail</td>
    <td class="arg">msg=None</td>
    <td class="doc">Fails the test immediately with the given (optional) message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Count">Get Count</td>
    <td class="arg">item1, item2</td>
    <td class="doc">Returns and logs how many times <span class="name">item2</span> is found from <span class="name">item1</span>.<br>
<br>
This keyword works with Python strings and lists and all objects that either have 'count' method or can be converted to Python lists.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${count} =</td>
<td>Get Count</td>
<td>${some item}</td>
<td>interesting value</td>
</tr>
<tr>
<td>Should Be True</td>
<td>5 &lt; ${count} &lt; 10</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Length">Get Length</td>
    <td class="arg">item</td>
    <td class="doc">Returns and logs the length of the given item.<br>
<br>
The keyword first tries to get the length with the Python function 'len', which calls the item's '__len__' method internally. If that fails, the keyword tries to call the item's 'length' and 'size' methods directly. The final attempt is trying to get the value of the item's 'length' attribute. If all these attempts are unsuccessful, the keyword fails.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Time">Get Time</td>
    <td class="arg">format=timestamp</td>
    <td class="doc">Returns the current time in the requested format.<br>
<br>
How time is returned is determined based on the given <span class="name">format</span> string as follows. Note that all checks are case-insensitive.<br>
<br>
- If <span class="name">format</span> contains the word 'epoch', the time is returned in seconds after the UNIX epoch. The return value is always an integer.<br>
<br>
- If <span class="name">format</span> contains any of the words 'year', 'month', 'day', 'hour', 'min', or 'sec', only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of words in <span class="name">format</span> is not significant. The parts are returned as zero-padded strings (e.g. May -&gt; '05').<br>
<br>
- Otherwise (and by default) the time is returned as a timestamp string in the format '2006-02-24 15:08:31'.<br>
<br>
Examples (expecting the current time is 2006-03-29 15:06:21):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${time} =</td>
<td>Get Time</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${secs} =</td>
<td>Get Time</td>
<td>epoch</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${year} =</td>
<td>Get Time</td>
<td>return year</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${yyyy}</td>
<td>${mm}</td>
<td>${dd} =</td>
<td>Get Time</td>
<td>year,month,day</td>
</tr>
<tr>
<td>@{time} =</td>
<td>Get Time</td>
<td>year month day hour min sec</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${y}</td>
<td>${s} =</td>
<td>Get Time</td>
<td>seconds and year</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${time} = '2006-03-29 15:06:21'<br>
- ${secs} = 1143637581<br>
- ${year} = '2006'<br>
- ${yyyy} = '2006', ${mm} = '03', ${dd} = '29'<br>
- @{time} = ['2006', '03', '29', '15', '06', '21']<br>
- ${y} = '2006'<br>
- ${s} = '21'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Grep">Grep</td>
    <td class="arg">text, pattern, pattern_type=literal string</td>
    <td class="doc"><b>DEPRECATED</b> Use <span class="name">Get Lines Matching XXX</span> keywords from <span class="name">String</span> library instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Library">Import Library</td>
    <td class="arg">name, *args</td>
    <td class="doc">Imports a library with the given name and optional arguments.<br>
<br>
This functionality allows dynamic importing of libraries while tests are running. That may be necessary, if the library itself is dynamic and not yet available when test data is processed. In a normal case, libraries should be imported using the Library setting in the Setting table.<br>
<br>
This keyword supports importing libraries both using library names and physical paths. When path are used, they must be given in absolute format. Starting from 2.0.2 version, forward slashes can be used as path separators in all operating systems. It is possible to use arguments as well as to give a custom name with 'WITH NAME' syntax. For more information about importing libraries, see Robot Framework User Guide.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Library</td>
<td>MyLibrary</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/Library.py</td>
<td>some</td>
<td>args</td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/../libs/Lib.java</td>
<td>arg</td>
<td>WITH NAME</td>
<td>JavaLib</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Variables">Import Variables</td>
    <td class="arg">path, *args</td>
    <td class="doc">Imports a variable file with the given path and optional arguments.<br>
<br>
Variables imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Variables setting. These variables override possible existing variables with the same names and this functionality can thus be used to import new variables, e.g. for each test in a test suite.<br>
<br>
The given path must be absolute. Starting from 2.0.2 version, forward slashes can be used as path separator regardless the operating system, but on earlier versions ${/} variable must be used instead.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Variables</td>
<td>${CURDIR}/variables.py</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Variables</td>
<td>${CURDIR}/../vars/env.py</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Length Should Be">Length Should Be</td>
    <td class="arg">item, length, msg=None</td>
    <td class="doc">Verifies that the length of the given item is correct.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log">Log</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc">Logs the given message with the given level.<br>
<br>
Valid levels are TRACE, DEBUG, INFO (default), HTML and WARN.<br>
<br>
HTML level is special because it writes the message into the log file without escaping HTML code from it. For example logging a message like '&lt;img src="image.png"&gt;' with that level creates an image, but with other levels you see just that string. &nbsp;Logging HTML messages should be used with care, because invalid messages can corrupt the whole log file. &nbsp;The actual log level used for HTML messages is INFO.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Many">Log Many</td>
    <td class="arg">*messages</td>
    <td class="doc">Logs the given messages as separate entries with the INFO level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Variables">Log Variables</td>
    <td class="arg">level=INFO</td>
    <td class="doc">Logs all variables in the current scope with given log level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="No Operation">No Operation</td>
    <td class="arg"></td>
    <td class="doc">Does absolutely nothing.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Regexp Escape">Regexp Escape</td>
    <td class="arg">*patterns</td>
    <td class="doc">Returns each argument string escaped for use as a regular expression.<br>
<br>
This keyword can be used to escape strings to be used with <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> and <a href="#Should%20Not%20Match%20Regexp" class="name">Should Not Match Regexp</a> keywords.<br>
<br>
Escaping is done with Python's re.escape() function.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${escaped} =</td>
<td>Regexp Escape</td>
<td>${original}</td>
</tr>
<tr>
<td>@{strings} =</td>
<td>Regexp Escape</td>
<td>@{strings}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Remove Tags">Remove Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Removes given <span class="name">tags</span> from the current test or all tests in a suite.<br>
<br>
Tags can be given exactly or using a pattern where '*' matches anything and '?' matches one character.<br>
<br>
This keyword can affect either one test case or all test cases in a test suite similarly as <a href="#Set%20Tags" class="name">Set Tags</a> keyword.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Remove Tags</td>
<td>mytag</td>
<td>something-*</td>
<td>?ython</td>
</tr>
</tbody></table>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Repeat Keyword">Repeat Keyword</td>
    <td class="arg">times, name, *args</td>
    <td class="doc">Executes the specified keyword multiple times.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>, and <span class="name">times</span> specifies how many the keyword should be executed. <span class="name">times</span> can be given as an integer or as a string that can be converted to an integer. It can also have postfix 'times' or 'x' (case and space insensitive) to make the expression easier to read.<br>
<br>
If <span class="name">times</span> is zero or negative, the keyword is not executed at all. This keyword fails immediately if any of the execution rounds fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Repeat Keyword</td>
<td>5 times</td>
<td>Goto Previous Page</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Repeat Keyword</td>
<td>${var}</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Replace Variables">Replace Variables</td>
    <td class="arg">text</td>
    <td class="doc">Replaces variables in the given text with their current values.<br>
<br>
If the text contains undefined variables, this keyword fails.<br>
<br>
Example:<br>
<br>
The file 'template.txt' contains 'Hello ${NAME}!' and variable '${NAME}' has the value 'Robot'.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${template} =</td>
<td>Get File</td>
<td>${CURDIR}/template.txt</td>
</tr>
<tr>
<td>${message} =</td>
<td>Replace Variables</td>
<td>${template}</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${message}</td>
<td>Hello Robot!</td>
</tr>
</tbody></table>
<br>
If the given <span class="name">text</span> contains only a single variable, its value is returned as-is. Otherwise, and always with Robot Framework 2.0.3 and earlier, this keyword returns a string.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword">Run Keyword</td>
    <td class="arg">name, *args</td>
    <td class="doc">Executes the given keyword with the given arguments.<br>
<br>
Because the name of the keyword to execute is given as an argument, it can be a variable and thus set dynamically, e.g. from a return value of another keyword or from the command line.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Expect Error">Run Keyword And Expect Error</td>
    <td class="arg">expected_error, name, *args</td>
    <td class="doc">Runs the keyword and checks that the expected error occurred.<br>
<br>
The expected error must be given in the same format as in Robot Framework reports. It can be a pattern containing characters '?', which matches to any single character and '*', which matches to any number of any characters. <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
If the expected error occurs, the error message is returned and it can be further processed/tested, if needed. If there is no error, or the error does not match the expected error, this keyword fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Run Keyword And Expect Error</td>
<td>My error</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
<tr>
<td>${msg} =</td>
<td>Run Keyword And Expect Error</td>
<td>*</td>
<td>My KW</td>
<td></td>
</tr>
<tr>
<td>Should Start With</td>
<td>${msg}</td>
<td>Once upon a time in</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Ignore Error">Run Keyword And Ignore Error</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments and ignores possible error.<br>
<br>
This keyword returns two values, so that the first is either 'PASS' or 'FAIL', depending on the status of the executed keyword. The second value is either the return value of the keyword or the received error message.<br>
<br>
The keyword name and arguments work as in <a href="#Run%20Keyword" class="name">Run Keyword</a>. See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for a usage example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If">Run Keyword If</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is true.<br>
<br>
The given <span class="name">condition</span> is evaluated similarly as with <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword, and <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
Example, a simple if/else construct:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status}</td>
<td>${value} =</td>
<td>Run Keyword And Ignore Error</td>
<td>My Keyword</td>
</tr>
<tr>
<td>Run Keyword If</td>
<td>'${status}' == 'PASS'</td>
<td>Some Action</td>
<td></td>
</tr>
<tr>
<td>Run Keyword Unless</td>
<td>'${status}' == 'PASS'</td>
<td>Another Action</td>
<td></td>
</tr>
</tbody></table>
<br>
In this example, only either 'Some Action' or 'Another Action' is executed, based on the status of 'My Keyword'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Critical Tests Passed">Run Keyword If All Critical Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all critical tests passed.<br>
<br>
This keyword can only be used in suite teardown. Trying to use it in any other place will result in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Tests Passed">Run Keyword If All Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all tests passed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Critical Tests Failed">Run Keyword If Any Critical Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if any critical tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Tests Failed">Run Keyword If Any Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if one or more tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Failed">Run Keyword If Test Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test failed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Passed">Run Keyword If Test Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test passed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword Unless">Run Keyword Unless</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is false.<br>
<br>
See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for more information and an example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Global Variable">Set Global Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available globally in all tests and suites.<br>
<br>
Variables set with this keyword are globally available in all test cases and suites executed after setting them. Setting variables with this keyword thus has the same effect as creating from the command line using the options '--variable' or '--variablefile'. Because this keyword can change variables everywhere, it should be used with care.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Library Search Order">Set Library Search Order</td>
    <td class="arg">*libraries</td>
    <td class="doc">Sets the resolution order to use when a name matches multiple keywords.<br>
<br>
The library search order is used to resolve conflicts when a keyword name in the test data matches multiple keywords. The first library containing the keyword is selected and that keyword implementation used. If keyword is not found from any library, or the library search order is not set, executing the specified keyword fails.<br>
<br>
When this keyword is used, there is no need to use the long <span class="name">LibraryName.Keyword Name</span> notation. &nbsp;For example, instead of having<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>MyLibrary.Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>MyLibrary.Another Keyword</td>
<td></td>
</tr>
<tr>
<td>MyLibrary.Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
you can have<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Library Search Order</td>
<td>MyLibrary</td>
</tr>
<tr>
<td>Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>Another Keyword</td>
<td></td>
</tr>
<tr>
<td>Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
The library search order is valid only in the suite where this keyword is used in. The old order is returned and can be used to reset the search order later.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Log Level">Set Log Level</td>
    <td class="arg">level</td>
    <td class="doc">Sets the log threshold to the specified level and returns the old level.<br>
<br>
Messages below the level will not logged. The default logging level is INFO, but it can be overridden with the command line option '--loglevel'.<br>
<br>
The available levels: TRACE, DEBUG, INFO (default), WARN and NONE (no logging).</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Suite Variable">Set Suite Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current suite.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test suite. Setting variables with this keyword thus has the same effect as creating them using the Variable table in the test data file or importing them from variable files. Other test suites, including possible child test suites, will not see variables set with this keyword.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
If a variable already exists within the new scope, its value will be overwritten. Otherwise a new variable is created. If a variable already exists within the current scope, the value can be left empty and the variable within the new scope gets the value within the current scope.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Suite Variable</td>
<td>${GREET}</td>
<td>Hello, world!</td>
</tr>
<tr>
<td>${ID} =</td>
<td>Get ID</td>
<td></td>
</tr>
<tr>
<td>Set Suite Variable</td>
<td>${ID}</td>
<td></td>
</tr>
</tbody></table>
<br>
See also <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a> and <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Tags">Set Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Adds given <span class="name">tags</span> for the current test or all tests in a suite.<br>
<br>
When this keyword is used inside a test case, that test gets the specified tags and other tests are not affected.<br>
<br>
If this keyword is used in a suite setup, all test cases in that suite, recursively, gets the given tags. It is a failure to use this keyword in a suite teardown.<br>
<br>
See <a href="#Remove%20Tags" class="name">Remove Tags</a> for another keyword to modify tags at test execution time.<br>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Test Variable">Set Test Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current test.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test case. For example, if you set a variable in a user keyword, it is available both in the test case level and also in all other user keywords used in the current test. Other test cases will not see variables set with this keyword.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable">Set Variable</td>
    <td class="arg">*values</td>
    <td class="doc">Returns the given argument which can then be assigned to a variable.<br>
<br>
This keyword is mainly used for setting scalar variables. Additionally it can be used for converting a scalar variable containing a list to a list variable or to multiple scalar variables.<br>
<br>
Using this keyword with more (or less) than one value has been deprecated in Robot Framework 2.1 and that usage will be removed in 2.2 version.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${hi} =</td>
<td>Set Variable</td>
<td>Hello, world!</td>
<td></td>
</tr>
<tr>
<td>${hi2} =</td>
<td>Set Variable</td>
<td>I said: ${hi}</td>
<td></td>
</tr>
<tr>
<td>@{list} =</td>
<td>Set Variable</td>
<td>${list with some items}</td>
<td></td>
</tr>
<tr>
<td>${item1}</td>
<td>${item2} =</td>
<td>Set Variable</td>
<td>${list with 2 items}</td>
</tr>
</tbody></table>
<br>
Variables created with this keyword are available only in the scope where they are created. See <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>, <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a> and <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for information on how to set variables so that they are available also in a larger scope.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable If">Set Variable If</td>
    <td class="arg">condition, *values</td>
    <td class="doc">Sets variable based on the given condition.<br>
<br>
The basic usage is giving a condition and two values. The given condition is first evaluated the same way as with the <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword. If the condition is true, then the first value is returned, and otherwise the second value is returned. The second value can also be omitted, in which case it has a default value None. This usage is illustrated in the examples below, where ${rc} is assumed to be zero.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var1} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
<td>nonzero</td>
</tr>
<tr>
<td>${var2} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>value1</td>
<td>value2</td>
</tr>
<tr>
<td>${var3} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>whatever</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${var1} = 'zero'<br>
- ${var2} = 'value2'<br>
- ${var3} = None<br>
<br>
Starting from Robot Framework 2.0.2 it is also possible to have 'Else If' support by replacing the second value with another condition, and having two new values after it. If the first condition is not true, the second is evaluated and one of the values after it is returned based on its truth value. This can be continued by adding more conditions without a limit.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 0</td>
<td>greater than zero</td>
<td>less then zero</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td></td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 0</td>
<td>zero</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 1</td>
<td>one</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 2</td>
<td>two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 2</td>
<td>greater than two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &lt; 0</td>
<td>less than zero</td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Empty">Should Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal">Should Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are unequal.<br>
<br>
- If <span class="name">msg</span> is not given, the error message is 'first != second'.<br>
- If <span class="name">msg</span> is given and <span class="name">values</span> is either Boolean False or the string 'False' or 'No Values', the error message is simply <span class="name">msg</span>.<br>
- Otherwise the error message is '<span class="name">msg</span>: <span class="name">first</span> != <span class="name">second</span>'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Integers">Should Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Numbers">Should Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Strings">Should Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be True">Should Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is not true.<br>
<br>
If <span class="name">condition</span> is a string (e.g. '${rc} &lt; 10'), it is evaluated as a Python expression using the built-in 'eval' function and the keyword status is decided based on the result. If a non-string item is given, the status is got directly from its truth value as explained at <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.<br>
<br>
The default error message ('&lt;condition&gt; should be true') is not very informative, but it can be overridden with the <span class="name">msg</span> argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Be True</td>
<td>${rc} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>Should Be True</td>
<td>'${status}' == 'PASS'</td>
<td># Strings must be quoted</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${number}</td>
<td># Passes if ${number} is not zero</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${list}</td>
<td># Passes if ${list} is not empty</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain">Should Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain</td>
<td>${output}</td>
<td>PASS</td>
</tr>
<tr>
<td>Should Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain X Times">Should Contain X Times</td>
    <td class="arg">item1, item2, count, msg=None</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> <span class="name">count</span> times.<br>
<br>
Works with strings, lists and all objects that <a href="#Get%20Count" class="name">Get Count</a> works with. The default error message can be overridden with <span class="name">msg</span> and the actual count is always logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain X Times</td>
<td>${output}</td>
<td>hello</td>
<td>2</td>
</tr>
<tr>
<td>Should Contain X Times</td>
<td>${some list}</td>
<td>value</td>
<td>3</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should End With">Should End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not end with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match">Should Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails unless the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern, '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match Regexp">Should Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> does not match <span class="name">pattern</span> as a regular expression.<br>
<br>
Regular expression check is done using the Python 're' module, which has a pattern syntax derived from Perl, and thus also very similar to the one in Java. See the following documents for more details about regular expressions in general and Python implementation in particular.<br>
<br>
* <a href="http://docs.python.org/lib/module-re.html">http://docs.python.org/lib/module-re.html</a><br>
* <a href="http://www.amk.ca/python/howto/regex/">http://www.amk.ca/python/howto/regex/</a><br>
<br>
Things to note about the regexp syntax in Robot Framework test data:<br>
<br>
1) Backslash is an escape character in the test data, and possible backslashes in the pattern must thus be escaped with another backslash (e.g. '\\d\\w+').<br>
<br>
2) Strings that may contain special characters, but should be handled as literal strings, can be escaped with the <a href="#Regexp%20Escape" class="name">Regexp Escape</a> keyword.<br>
<br>
3) The given pattern does not need to match the whole string. For example, the pattern 'ello' matches the string 'Hello world!'. If a full match is needed, the '^' and '$' characters can be used to denote the beginning and end of the string, respectively. For example, '^ello$' only matches the exact string 'ello'.<br>
<br>
4) Possible flags altering how the expression is parsed (e.g. re.IGNORECASE, re.MULTILINE) can be set by prefixing the pattern with the '(?iLmsux)' group (e.g. '(?im)pattern'). The available flags are 'IGNORECASE': 'i', 'MULTILINE': 'm', 'DOTALL': 's', 'VERBOSE': 'x', 'UNICODE': 'u', and 'LOCALE': 'L'.<br>
<br>
If this keyword passes, it returns the portion of the string that matched the pattern. Additionally, the possible captured groups are returned.<br>
<br>
See the <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> keyword for an explanation on how to override the default error message with the <span class="name">msg</span> and <span class="name">values</span> arguments.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>\\d{6}</td>
<td># Output contains six numbers</td>
</tr>
<tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>^\\d{6}$</td>
<td># Six numbers and nothing more</td>
</tr>
<tr>
<td>${ret} =</td>
<td>Should Match Regexp</td>
<td>Foo: 42</td>
<td>(?i)foo: \\d+</td>
</tr>
<tr>
<td>${match}</td>
<td>${group1}</td>
<td>${group2} =</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>Should Match Regexp</td>
<td>Bar: 43</td>
<td>(Foo|Bar): (\\d+)</td>
</tr>
</tbody></table>
=&gt;<br>
- ${ret} = 'Foo: 42'<br>
- ${match} = 'Bar: 43'<br>
- ${group1} = 'Bar'<br>
- ${group2} = '43'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Empty">Should Not Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is not empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal">Should Not Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are equal.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Integers">Should Not Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Numbers">Should Not Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Strings">Should Not Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be True">Should Not Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is true.<br>
<br>
See <a href="#Should%20Be%20True" class="name">Should Be True</a> for details about how <span class="name">condition</span> is evaluated and how <span class="name">msg</span> can be used to override the default error message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Contain">Should Not Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> contains <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Not Contain</td>
<td>${output}</td>
<td>FAILED</td>
</tr>
<tr>
<td>Should Not Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not End With">Should Not End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> ends with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match">Should Not Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match Regexp">Should Not Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> matches <span class="name">pattern</span> as a regular expression.<br>
<br>
See <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> for more information about arguments.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Start With">Should Not Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> starts with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Start With">Should Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not start with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Sleep">Sleep</td>
    <td class="arg">time, reason=None</td>
    <td class="doc">Pauses the test executed for the given time.<br>
<br>
<span class="name">time</span> may be either a number or a time string. Time strings are in a format such as '1 day 2 hours 3 minutes 4 seconds 5milliseconds' or '1d 2h 3m 4s 5ms', and they are fully explained in an appendix of Robot Framework User Guide. Optional <span class="name">reason</span> can be used to explain why sleeping is necessary. Both the time slept and the reason are logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Sleep</td>
<td>42</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>1.5</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>2 minutes 10 seconds</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>10s</td>
<td>Wait for a reply</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Syslog">Syslog</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc"><b>DEPRECATED</b> Use <a href="#Log" class="name">Log</a> keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Exist">Variable Should Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails unless the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Not Exist">Variable Should Not Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails if the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Wait Until Keyword Succeeds">Wait Until Keyword Succeeds</td>
    <td class="arg">timeout, retry_interval, name, *args</td>
    <td class="doc">Waits until the specified keyword succeeds or the given timeout expires.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>. If the specified keyword does not succeed within <span class="name">timeout</span>, this keyword fails. <span class="name">retry_interval</span> is the time to wait before trying to run the keyword again after the previous run has failed.<br>
<br>
Both <span class="name">timeout</span> and <span class="name">retry_interval</span> must be given in Robot Framework's time format (e.g. '1 minute', '2 min 3 s', '4.5').<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Wait Until Keyword Succeeds</td>
<td>2 min</td>
<td>5 sec</td>
<td>My keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
</tbody></table>
<div class="hr"><hr></div>
<p class="info">Altogether 72 keywords.</p>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.869 INFO - Command request: open[http://localhost:8001/search/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.943 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.947 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.960 INFO - Got result: OK,RFDoc | Search on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.966 INFO - Command request: type[search_term, title] on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.981 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:16.984 INFO - Command request: click[xpath=//input[@id="search_button" or @name="search_button" or @value="search_button" or @src="search_button"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.005 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.012 INFO - Command request: waitForPageToLoad[5000, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.043 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.048 INFO - Command request: isElementPresent[//td/a[text()='Get Title'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.071 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.075 INFO - Command request: isElementPresent[//td/a[text()='Title Should Be'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.088 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.094 INFO - Command request: isTextPresent[2 matching keywords found., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.117 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.126 INFO - Command request: open[http://localhost:8001/search/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.181 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.184 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.199 INFO - Got result: OK,RFDoc | Search on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.205 INFO - Command request: isChecked[include_doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.220 INFO - Got result: OK,false on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.222 INFO - Command request: check[include_doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.235 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.239 INFO - Command request: type[search_term, TITLE] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.256 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.259 INFO - Command request: click[xpath=//input[@id="search_button" or @name="search_button" or @value="search_button" or @src="search_button"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.294 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.296 INFO - Command request: waitForPageToLoad[5000, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.347 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.352 INFO - Command request: isElementPresent[//td/a[text()='Get Title'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.366 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.371 INFO - Command request: isElementPresent[//td/a[text()='Title Should Be'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.389 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.393 INFO - Command request: isElementPresent[//td/a[text()='Select Window'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.409 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.414 INFO - Command request: isTextPresent[3 matching keywords found., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.436 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.444 INFO - Command request: open[http://localhost:8001/search/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.506 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.511 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.553 INFO - Got result: OK,RFDoc | Search on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.561 INFO - Command request: isChecked[include_doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.695 INFO - Got result: OK,false on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.697 INFO - Command request: check[include_doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.705 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.709 INFO - Command request: type[search_term, non-matching term] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.721 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.725 INFO - Command request: click[xpath=//input[@id="search_button" or @name="search_button" or @value="search_button" or @src="search_button"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.740 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.750 INFO - Command request: waitForPageToLoad[5000, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.795 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.799 INFO - Command request: isTextPresent[No matching keywords found., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.816 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.824 INFO - Command request: open[http://localhost:8001/search/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.870 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.874 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.886 INFO - Got result: OK,RFDoc | Search on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.894 INFO - Command request: type[search_term, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.908 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.912 INFO - Command request: click[xpath=//input[@id="search_button" or @name="search_button" or @value="search_button" or @src="search_button"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.929 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.935 INFO - Command request: waitForPageToLoad[5000, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.966 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:17.971 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.002 INFO - Got result: OK,This field is required. on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.015 INFO - Command request: open[http://localhost:8001/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.100 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.103 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.120 INFO - Got result: OK,RFDoc | Welcome on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.129 INFO - Command request: open[http://localhost:8001/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.271 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.274 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.280 INFO - Got result: OK,RFDoc | Welcome on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.286 INFO - Command request: isChecked[include_doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.312 INFO - Got result: OK,false on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.314 INFO - Command request: check[include_doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.325 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.329 INFO - Command request: type[search_term, TITLE] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.342 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.345 INFO - Command request: click[xpath=//input[@id="search_button" or @name="search_button" or @value="search_button" or @src="search_button"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.370 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.372 INFO - Command request: waitForPageToLoad[5000, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.410 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.416 INFO - Command request: getLocation[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.423 INFO - Got result: OK,http://localhost:8001/search/ on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.427 INFO - Command request: isElementPresent[//td/a[text()='Get Title'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.454 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.458 INFO - Command request: isElementPresent[//td/a[text()='Title Should Be'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.465 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.469 INFO - Command request: isElementPresent[//td/a[text()='Select Window'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.475 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.481 INFO - Command request: isTextPresent[3 matching keywords found., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.499 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.505 INFO - Command request: open[http://localhost:8001/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.573 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.577 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.597 INFO - Got result: OK,RFDoc | Welcome on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.607 INFO - Command request: open[http://localhost:8001/search/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.694 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.698 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.715 INFO - Got result: OK,RFDoc | Search on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.722 INFO - Command request: isChecked[include_doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.740 INFO - Got result: OK,false on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.742 INFO - Command request: check[include_doc, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.757 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.761 INFO - Command request: type[search_term, TITLE] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.780 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.795 INFO - Command request: click[xpath=//input[@id="search_button" or @name="search_button" or @value="search_button" or @src="search_button"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.881 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.883 INFO - Command request: waitForPageToLoad[5000, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.945 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.949 INFO - Command request: getLocation[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.969 INFO - Got result: OK,http://localhost:8001/search/ on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.974 INFO - Command request: isElementPresent[//td/a[text()='Get Title'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.989 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:18.993 INFO - Command request: isElementPresent[//td/a[text()='Title Should Be'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.010 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.015 INFO - Command request: isElementPresent[//td/a[text()='Select Window'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.029 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.035 INFO - Command request: isTextPresent[3 matching keywords found., ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.057 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.064 INFO - Command request: open[http://localhost:8001/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.155 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.159 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.169 INFO - Got result: OK,RFDoc | Welcome on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.178 INFO - Command request: open[http://localhost:8001/search/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.278 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.281 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.291 INFO - Got result: OK,RFDoc | Search on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.298 INFO - Command request: type[search_term, title] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.312 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.315 INFO - Command request: click[xpath=//input[@id="search_button" or @name="search_button" or @value="search_button" or @src="search_button"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.340 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.342 INFO - Command request: waitForPageToLoad[5000, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.372 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.379 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.444 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | Search</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    


<h2>Search keywords</h2>
<form enctype="multipart/form-data" action="/search/" method="post">
  
  <table id="search">
    <tbody><tr>
      <td><input name="search_term" value="title" id="id_search_term" type="text"></td>
      <td>
        <input name="include_doc" id="id_include_doc" type="checkbox">
        <label for="id_include_doc">Search also documentation</label>
      </td>
  </tr></tbody></table>
  <input name="search_button" value="Search" type="submit">
</form>



<div class="hr"><hr></div>
<h2>Search results</h2>
<p class="info">
  2
  matching keywords found.
</p>

<table class="keywords results">
  
  <tbody><tr>
    <td><a href="/lib/SeleniumLibrary#Get%20Title">Get Title</a></td>
    <td><a href="/lib/SeleniumLibrary">SeleniumLibrary</a></td>
    <td>Returns title of current page.</td>
  </tr>
  
  <tr>
    <td><a href="/lib/SeleniumLibrary#Title%20Should%20Be">Title Should Be</a></td>
    <td><a href="/lib/SeleniumLibrary">SeleniumLibrary</a></td>
    <td>Verifies that current page title equals `title`.</td>
  </tr>
  
</tbody></table>



  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.484 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.593 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.604 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.621 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.629 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/text_file.txt] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.648 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.651 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.676 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.681 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.727 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.731 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.742 INFO - Got result: OK,Given file is not XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.747 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.806 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.809 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.819 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.828 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/invalid_content.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.841 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.844 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.859 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.862 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.906 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.910 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.921 INFO - Got result: OK,Given file contains invalid XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.926 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.989 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:19.992 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.007 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.016 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/non_existing_file.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.033 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.038 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.065 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.068 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.097 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.102 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.140 INFO - Got result: OK,The submitted file is empty. on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.145 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.218 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.223 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.239 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.251 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/empty_library_name.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.272 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.276 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.304 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.307 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.365 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.369 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.382 INFO - Got result: OK,Given file contains invalid XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.391 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.445 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.449 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.462 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.470 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/missing_library_name.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.485 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.492 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.517 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.519 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.561 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.565 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.577 INFO - Got result: OK,Given file contains invalid XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.582 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.640 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.643 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.654 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.664 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/missing_library_doc.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.681 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.685 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.710 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.716 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.768 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.773 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.787 INFO - Got result: OK,Given file contains invalid XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.793 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.852 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.856 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.869 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.882 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/empty_keyword_name.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.902 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.905 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.930 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.937 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.979 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.983 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:20.996 INFO - Got result: OK,Given file contains invalid XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.001 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.054 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.059 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.071 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.080 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/missing_keyword_name.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.095 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.108 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.129 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.131 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.182 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.187 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.199 INFO - Got result: OK,Given file contains invalid XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.204 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.263 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.267 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.281 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.291 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/missing_keyword_doc.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.312 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.317 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.343 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.346 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.394 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.400 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.443 INFO - Got result: OK,Given file contains invalid XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.454 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.570 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.575 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.587 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.603 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/empty_keyword.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.663 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.670 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.910 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.915 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:21.990 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.002 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.038 INFO - Got result: OK,Given file contains invalid XML. on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.052 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.196 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.205 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.232 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.256 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/empty_keywords.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.295 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.304 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.339 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.345 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.430 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.442 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.462 INFO - Got result: OK,Given test library contains no keywords. on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.476 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.616 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.625 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.646 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.672 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/invalid/missing_keywords.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.708 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.717 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.741 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.749 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.778 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.782 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.815 INFO - Got result: OK,Given test library contains no keywords. on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.820 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.879 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.882 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.897 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.909 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.969 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.972 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.984 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:22.990 INFO - Command request: isChecked[override, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.004 INFO - Got result: OK,false on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.011 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/LibraryWithInit_v2.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.037 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.042 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.065 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.067 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.110 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.114 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.167 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | Upload</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>Upload documentation</h2>
<p class="info">
  Select an XML file containing library or resource file
  documentation. These files can be created using 
  <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool">libdoc.py</a>
  tool.
</p>
<div class="hr"><hr></div>
<form enctype="multipart/form-data" action="/upload/" method="post">
  
  <ul class="errorlist"><li>Library ExampleLibrary already exists.</li></ul>
  <div>
    <input id="id_file" name="file" size="40" type="file">
  </div>
  <div>
    <input name="override" id="id_override" type="checkbox">
    <label for="id_override">Overwrite existing documentation with same name</label>
  </div>
  <input value="Upload" type="submit">
</form>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.174 INFO - Command request: getText[xpath=//ul[@class='errorlist'], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.191 INFO - Got result: OK,Library ExampleLibrary already exists. on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.197 INFO - Command request: open[http://localhost:8001/lib/ExampleLibrary, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.283 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.289 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.328 INFO - Got result: OK,RFDoc | ExampleLibrary on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.332 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.391 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | ExampleLibrary</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>ExampleLibrary</h2>

<h3 id="introduction">Introduction</h3>
<p class="libintro">First Library Doc</p>

<h3 id="importing">Importing</h3>
<table class="keywords">
  <tbody><tr>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="arg">timeout=3.0, is_regexp=False</td>
    <td class="doc">Library can be imported with optional arguments.</td>
  </tr>
  
</tbody></table>

<h3>Shortcuts</h3>
<div class="shortcuts">

<a href="#First%20Keyword" title="First KW doc">First&nbsp;Keyword</a>
·

<a href="#My%20Second%20Keyword" title="Second KW doc">My&nbsp;Second&nbsp;Keyword</a>


</div>
<h3>Keywords</h3>
<table class="keywords">
  <tbody><tr>
    <th class="kw">Keyword</th>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="kw" id="First Keyword">First Keyword</td>
    <td class="arg">first, second=default, *args</td>
    <td class="doc">First KW doc</td>
  </tr>
  
  <tr>
    <td class="kw" id="My Second Keyword">My Second Keyword</td>
    <td class="arg">some</td>
    <td class="doc">Second KW doc</td>
  </tr>
  
</tbody></table>
<div class="hr"><hr></div>
<p class="info">Altogether 2 keywords.</p>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.412 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.478 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.481 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.502 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.506 INFO - Command request: isChecked[override, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.519 INFO - Got result: OK,false on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.520 INFO - Command request: check[override, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.532 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.539 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/LibraryWithInit_v2.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.555 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.558 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.581 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.583 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.637 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.643 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.711 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | Upload</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>Upload documentation</h2>
<p class="info">
  Select an XML file containing library or resource file
  documentation. These files can be created using 
  <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool">libdoc.py</a>
  tool.
</p>
<div class="hr"><hr></div>
<form enctype="multipart/form-data" action="/upload/" method="post">
  
  <div class="success">
    Successfully uploaded library <a href="/lib/ExampleLibrary">ExampleLibrary</a>.
  </div>
  
  
  <div>
    <input id="id_file" name="file" size="40" type="file">
  </div>
  <div>
    <input checked="checked" name="override" value="on" id="id_override" type="checkbox">
    <label for="id_override">Overwrite existing documentation with same name</label>
  </div>
  <input value="Upload" type="submit">
</form>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.716 INFO - Command request: isTextPresent[Successfully uploaded library ExampleLibrary, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.736 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.740 INFO - Command request: click[xpath=//a[@id="/lib/ExampleLibrary" or @name="/lib/ExampleLibrary" or @href="/lib/ExampleLibrary" or normalize-space(descendant-or-self::text())="/lib/ExampleLibrary"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.759 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.761 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.859 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.863 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.876 INFO - Got result: OK,RFDoc | ExampleLibrary on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.881 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:23.931 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | ExampleLibrary</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>ExampleLibrary</h2>

<p class="version"><b>Version:</b> 2</p>

<h3 id="introduction">Introduction</h3>
<p class="libintro">Updated Library Doc</p>

<h3 id="importing">Importing</h3>
<table class="keywords">
  <tbody><tr>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="arg">timeout=3.0, is_regexp=New Value</td>
    <td class="doc">Library can be imported with optional arguments.</td>
  </tr>
  
</tbody></table>

<h3>Shortcuts</h3>
<div class="shortcuts">

<a href="#First%20Keyword%20Updated" title="Updated KW doc">First&nbsp;Keyword&nbsp;Updated</a>
·

<a href="#My%20Second%20Keyword" title="Second KW doc">My&nbsp;Second&nbsp;Keyword</a>
·

<a href="#Third%20Keyword" title="Third KW doc">Third&nbsp;Keyword</a>


</div>
<h3>Keywords</h3>
<table class="keywords">
  <tbody><tr>
    <th class="kw">Keyword</th>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="kw" id="First Keyword Updated">First Keyword Updated</td>
    <td class="arg">first, second=default updated, *args</td>
    <td class="doc">Updated KW doc</td>
  </tr>
  
  <tr>
    <td class="kw" id="My Second Keyword">My Second Keyword</td>
    <td class="arg">some</td>
    <td class="doc">Second KW doc</td>
  </tr>
  
  <tr>
    <td class="kw" id="Third Keyword">Third Keyword</td>
    <td class="arg">third</td>
    <td class="doc">Third KW doc</td>
  </tr>
  
</tbody></table>
<div class="hr"><hr></div>
<p class="info">Altogether 3 keywords.</p>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.193 INFO - Command request: open[http://localhost:8001/upload/, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.249 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.252 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.294 INFO - Got result: OK,RFDoc | Upload on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.302 INFO - Command request: type[file, /home/jth/workspace/rfdoc-hg/trunk/atest/rfdoc/../testdata/BuiltIn.xml] on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.319 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.322 INFO - Command request: click[xpath=//input[@id="Upload" or @name="Upload" or @value="Upload" or @src="Upload"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.348 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.354 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.608 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.622 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.689 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | Upload</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>Upload documentation</h2>
<p class="info">
  Select an XML file containing library or resource file
  documentation. These files can be created using 
  <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool">libdoc.py</a>
  tool.
</p>
<div class="hr"><hr></div>
<form enctype="multipart/form-data" action="/upload/" method="post">
  
  <div class="success">
    Successfully uploaded library <a href="/lib/BuiltIn">BuiltIn</a>.
  </div>
  
  
  <div>
    <input id="id_file" name="file" size="40" type="file">
  </div>
  <div>
    <input name="override" id="id_override" type="checkbox">
    <label for="id_override">Overwrite existing documentation with same name</label>
  </div>
  <input value="Upload" type="submit">
</form>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.703 INFO - Command request: isTextPresent[Successfully uploaded library BuiltIn, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.743 INFO - Got result: OK,true on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.756 INFO - Command request: click[xpath=//a[@id="/lib/BuiltIn" or @name="/lib/BuiltIn" or @href="/lib/BuiltIn" or normalize-space(descendant-or-self::text())="/lib/BuiltIn"], ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.788 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:24.793 INFO - Command request: waitForPageToLoad[60000.0, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:25.154 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:25.158 INFO - Command request: getTitle[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:25.164 INFO - Got result: OK,RFDoc | BuiltIn on session 099f5bd38f4248309d5a9148e18ef011
11:59:25.171 INFO - Command request: getHtmlSource[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:25.219 INFO - Got result: OK,<head>

<!--
Copyright 2009 Nokia Siemens Networks Oyj

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



  <title>RFDoc | BuiltIn</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style media="all" type="text/css">
/*
 * The original source for these styles is the Graphite theme got from
 * the excellent Wufoo Form Gallery <http://wufoo.com/gallery>.
 *
 * All themes and templates from the Wufoo Form Gallery are provided
 * under a Creative Commons Attribution license.
 *
 * http://creativecommons.org/licenses/by/3.0/
 */

/* General structure */
body {
  background: #222222; 
  font-size: small;
  font-family: sans-serif;
  padding: 1em;
}
#header, #content, #footer {
  margin: 0 auto;
  width: 70%;
  max-width: 1000px;
  padding: 1.7em;
}

/* Header */
#header {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  height: 1.5em;
  background: #444444;
  color: white;
  font-variant: small-caps;
}
h1 {
  font-size: 1.5em;
  letter-spacing: -0.2em;
  margin: 0;
  float: left;
}
#navi {
  float: right;
}
h1 a, h1 a:hover, #navi a {
  color: white;
  text-decoration: none;
}
#navi a:hover {
  color: #eeeeee;
}

/* Footer */
#footer {
  padding-top: 0.4em;
  padding-bottom: 0.4em;
  background: #444444;
  color: black;
}
#footer p {
  font-size: 0.8em;
  text-align: center;
  margin: 0;
}
#footer p a {
  color: black;
  text-decoration: none;
}  
#footer p a:hover {
  color: #eeeeee;
}

/* Content */
#content {
  padding-top: 0.7em;
  background: white;
  color: #555555;
}
h2, h3 {
  color: #222222;
  font-weight: normal;
  font-size: 1.6em;
  margin: 0.5em 0em 0.3em 0em;
}
h3 {
  font-size: 1.2em;
}
div.hr {
  margin: 1.3em 0em;
  border-bottom: 1px dotted #cccccc;
}
div.hr hr {
  display: none;
}
p.info {
  margin: 0;
}
a {
  color: black;
}
ul.libraries {
  margin-top: 0;
  margin-bottom: 0;
}
ul.libraries a {
  text-decoration: none;
}
a:hover {
  color: #444444;
  text-decoration: underline;
}

/* Forms */
form {
  font-size: 0.9em;
}
form div {
  margin: 1.3em 0;
}
.success, .errorlist {
  font-size: 0.85em;
  background: #eeeeee;
  padding: 0.6em 1.4em;
  margin: 0;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
}
.errorlist {
  list-style-type: none;
  color: red;
}

/* Search */
table#search {
  margin: 0.5em 0 1em 0;
}
table#search td {
  padding-right: 1em;
}
input#id_search_term {
  width: 20em;
}
table.results td a {
  text-decoration: none;
}
table.results td a:hover {
  text-decoration: underline;
}

/* Library pages */
p.version {
  font-size: 0.85em;
}
p.version b {
  font-weight: normal;
  color: black;
}
p.libintro {
  margin: 1em 0em;
}
div.shortcuts {
  margin: 1em 0em;
  font-size: 0.85em;
}
div.shortcuts a {
  text-decoration: none;
}
div.shortcuts a:hover {
  text-decoration: underline;
}
table.keywords {
  background: white;
  border: 1px solid #444444;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.9em;
  margin: 1em 0em;
  width: 100%;
}
table.keywords th, table.keywords td {
  border: 1px solid #444444;
  padding: 0.2em 0.3em;
}
table.keywords th {
  background: #eeeeee;
  font-weight: normal;
  color: black;
}
table.keywords td {
  vertical-align: top;
}    
table.keywords td.kw {
  width: 120px;
  color: black;
}
table.keywords td.arg {
  width: 150px;
  font-style: italic;
}
table.doc {
  border: 1px solid gray;
  background: transparent;
  border-collapse: collapse;
  empty-cells: show;
  font-size: 0.85em;
  font-family: sans-serif;
}
table.doc td {
  border: 1px solid gray;
  padding: 0.1em 0.2em;
  height: 1.2em;
}
table.doc b {
  font-weight: normal;
  color: black;
}
a.name, span.name {  
  font-style: italic;
  color: black;
}
a.name:hover {
  color: #444444;
}
</style>
<style media="print" type="text/css">
#header, #footer {
  display: none;
}
body, #content {
  background: white;
  width: 100%;
  max-width: 100%;
  padding: 0;
  margin: 0;
  font-size: 10px;
}
table.keywords {
  width: 99%;
  margin-left: 1px;
  margin-right: 1px;
}
a {
  text-decoration: none;
}
</style>
</head><body>
  <div id="header">
    <h1><a href="/">RFDoc</a></h1>
    <div id="navi">[<a href="/">front page</a>]</div>
  </div>
  <div id="content">
    
<h2>BuiltIn</h2>

<p class="version"><b>Version:</b> 2.1</p>

<h3 id="introduction">Introduction</h3>
<p class="libintro">An always available standard library with often needed keywords.<br>
<br>
<span class="name">BuiltIn</span> is Robot Framework's standard library that provides a set of generic keywords needed often. It is imported automatically and thus always available. The provided keywords can be used, for example, for verifications (e.g. <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a>, <a href="#Should%20Contain" class="name">Should Contain</a>), conversions (e.g. <a href="#Convert%20To%20Integer" class="name">Convert To Integer</a>) and for various other purposes (e.g. <a href="#Log" class="name">Log</a>, <a href="#Sleep" class="name">Sleep</a>, <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a>, <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>).</p>

<h3>Shortcuts</h3>
<div class="shortcuts">

<a href="#Call%20Method" title="Calls the named method of the given object with the provided arguments.">Call&nbsp;Method</a>
·

<a href="#Catenate" title="Catenates the given items together and returns the resulted string.">Catenate</a>
·

<a href="#Comment" title="Displays the given messages in the log file as keyword arguments.">Comment</a>
·

<a href="#Convert%20To%20Boolean" title="Converts the given item to Boolean true or false.">Convert&nbsp;To&nbsp;Boolean</a>
·

<a href="#Convert%20To%20Integer" title="Converts the given item to an integer number.">Convert&nbsp;To&nbsp;Integer</a>
·

<a href="#Convert%20To%20Number" title="Converts the given item to a floating point number.">Convert&nbsp;To&nbsp;Number</a>
·

<a href="#Convert%20To%20String" title="Converts the given item to a Unicode string.">Convert&nbsp;To&nbsp;String</a>
·

<a href="#Create%20List" title="Returns a list containing given items.">Create&nbsp;List</a>
·

<a href="#Evaluate" title="Evaluates the given expression in Python and returns the results.">Evaluate</a>
·

<a href="#Fail" title="Fails the test immediately with the given (optional) message.">Fail</a>
·

<a href="#Get%20Count" title="Returns and logs how many times `item2` is found from `item1`.">Get&nbsp;Count</a>
·

<a href="#Get%20Length" title="Returns and logs the length of the given item.">Get&nbsp;Length</a>
·

<a href="#Get%20Time" title="Returns the current time in the requested format.">Get&nbsp;Time</a>
·

<a href="#Grep" title="*DEPRECATED* Use `Get Lines Matching XXX` keywords from `String` library instead. This keyword will be removed in Robot Framework 2.2.">Grep</a>
·

<a href="#Import%20Library" title="Imports a library with the given name and optional arguments.">Import&nbsp;Library</a>
·

<a href="#Import%20Variables" title="Imports a variable file with the given path and optional arguments.">Import&nbsp;Variables</a>
·

<a href="#Length%20Should%20Be" title="Verifies that the length of the given item is correct.">Length&nbsp;Should&nbsp;Be</a>
·

<a href="#Log" title="Logs the given message with the given level.">Log</a>
·

<a href="#Log%20Many" title="Logs the given messages as separate entries with the INFO level.">Log&nbsp;Many</a>
·

<a href="#Log%20Variables" title="Logs all variables in the current scope with given log level.">Log&nbsp;Variables</a>
·

<a href="#No%20Operation" title="Does absolutely nothing.">No&nbsp;Operation</a>
·

<a href="#Regexp%20Escape" title="Returns each argument string escaped for use as a regular expression.">Regexp&nbsp;Escape</a>
·

<a href="#Remove%20Tags" title="Removes given `tags` from the current test or all tests in a suite.">Remove&nbsp;Tags</a>
·

<a href="#Repeat%20Keyword" title="Executes the specified keyword multiple times.">Repeat&nbsp;Keyword</a>
·

<a href="#Replace%20Variables" title="Replaces variables in the given text with their current values.">Replace&nbsp;Variables</a>
·

<a href="#Run%20Keyword" title="Executes the given keyword with the given arguments.">Run&nbsp;Keyword</a>
·

<a href="#Run%20Keyword%20And%20Expect%20Error" title="Runs the keyword and checks that the expected error occurred.">Run&nbsp;Keyword&nbsp;And&nbsp;Expect&nbsp;Error</a>
·

<a href="#Run%20Keyword%20And%20Ignore%20Error" title="Runs the given keyword with the given arguments and ignores possible error.">Run&nbsp;Keyword&nbsp;And&nbsp;Ignore&nbsp;Error</a>
·

<a href="#Run%20Keyword%20If" title="Runs the given keyword with the given arguments, if `condition` is true.">Run&nbsp;Keyword&nbsp;If</a>
·

<a href="#Run%20Keyword%20If%20All%20Critical%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all critical tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Critical&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20All%20Tests%20Passed" title="Runs the given keyword with the given arguments, if all tests passed.">Run&nbsp;Keyword&nbsp;If&nbsp;All&nbsp;Tests&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Critical%20Tests%20Failed" title="Runs the given keyword with the given arguments, if any critical tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Critical&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Any%20Tests%20Failed" title="Runs the given keyword with the given arguments, if one or more tests failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Any&nbsp;Tests&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Failed" title="Runs the given keyword with the given arguments, if the test failed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Failed</a>
·

<a href="#Run%20Keyword%20If%20Test%20Passed" title="Runs the given keyword with the given arguments, if the test passed.">Run&nbsp;Keyword&nbsp;If&nbsp;Test&nbsp;Passed</a>
·

<a href="#Run%20Keyword%20Unless" title="Runs the given keyword with the given arguments, if `condition` is false.">Run&nbsp;Keyword&nbsp;Unless</a>
·

<a href="#Set%20Global%20Variable" title="Makes a variable available globally in all tests and suites.">Set&nbsp;Global&nbsp;Variable</a>
·

<a href="#Set%20Library%20Search%20Order" title="Sets the resolution order to use when a name matches multiple keywords.">Set&nbsp;Library&nbsp;Search&nbsp;Order</a>
·

<a href="#Set%20Log%20Level" title="Sets the log threshold to the specified level and returns the old level.">Set&nbsp;Log&nbsp;Level</a>
·

<a href="#Set%20Suite%20Variable" title="Makes a variable available everywhere within the scope of the current suite.">Set&nbsp;Suite&nbsp;Variable</a>
·

<a href="#Set%20Tags" title="Adds given `tags` for the current test or all tests in a suite.">Set&nbsp;Tags</a>
·

<a href="#Set%20Test%20Variable" title="Makes a variable available everywhere within the scope of the current test.">Set&nbsp;Test&nbsp;Variable</a>
·

<a href="#Set%20Variable" title="Returns the given argument which can then be assigned to a variable.">Set&nbsp;Variable</a>
·

<a href="#Set%20Variable%20If" title="Sets variable based on the given condition.">Set&nbsp;Variable&nbsp;If</a>
·

<a href="#Should%20Be%20Empty" title="Verifies that the given item is empty.">Should&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Be%20Equal" title="Fails if the given objects are unequal.">Should&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Be%20Equal%20As%20Integers" title="Fails if objects are unequal after converting them to integers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Be%20Equal%20As%20Numbers" title="Fails if objects are unequal after converting them to real numbers.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Be%20Equal%20As%20Strings" title="Fails if objects are unequal after converting them to strings.">Should&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Be%20True" title="Fails if the given condition is not true.">Should&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Contain" title="Fails if `item1` does not contain `item2` one or more times.">Should&nbsp;Contain</a>
·

<a href="#Should%20Contain%20X%20Times" title="Fails if `item1` does not contain `item2` `count` times.">Should&nbsp;Contain&nbsp;X&nbsp;Times</a>
·

<a href="#Should%20End%20With" title="Fails if the string `str1` does not end with the string `str2`.">Should&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Match" title="Fails unless the given `string` matches the given `pattern`.">Should&nbsp;Match</a>
·

<a href="#Should%20Match%20Regexp" title="Fails if `string` does not match `pattern` as a regular expression.">Should&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Be%20Empty" title="Verifies that the given item is not empty.">Should&nbsp;Not&nbsp;Be&nbsp;Empty</a>
·

<a href="#Should%20Not%20Be%20Equal" title="Fails if the given objects are equal.">Should&nbsp;Not&nbsp;Be&nbsp;Equal</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Integers" title="Fails if objects are equal after converting them to integers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Integers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Numbers" title="Fails if objects are equal after converting them to real numbers.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Numbers</a>
·

<a href="#Should%20Not%20Be%20Equal%20As%20Strings" title="Fails if objects are equal after converting them to strings.">Should&nbsp;Not&nbsp;Be&nbsp;Equal&nbsp;As&nbsp;Strings</a>
·

<a href="#Should%20Not%20Be%20True" title="Fails if the given condition is true.">Should&nbsp;Not&nbsp;Be&nbsp;True</a>
·

<a href="#Should%20Not%20Contain" title="Fails if `item1` contains `item2` one or more times.">Should&nbsp;Not&nbsp;Contain</a>
·

<a href="#Should%20Not%20End%20With" title="Fails if the string `str1` ends with the string `str2`.">Should&nbsp;Not&nbsp;End&nbsp;With</a>
·

<a href="#Should%20Not%20Match" title="Fails if the given `string` matches the given `pattern`.">Should&nbsp;Not&nbsp;Match</a>
·

<a href="#Should%20Not%20Match%20Regexp" title="Fails if `string` matches `pattern` as a regular expression.">Should&nbsp;Not&nbsp;Match&nbsp;Regexp</a>
·

<a href="#Should%20Not%20Start%20With" title="Fails if the string `str1` starts with the string `str2`.">Should&nbsp;Not&nbsp;Start&nbsp;With</a>
·

<a href="#Should%20Start%20With" title="Fails if the string `str1` does not start with the string `str2`.">Should&nbsp;Start&nbsp;With</a>
·

<a href="#Sleep" title="Pauses the test executed for the given time.">Sleep</a>
·

<a href="#Syslog" title="*DEPRECATED* Use `Log` keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.">Syslog</a>
·

<a href="#Variable%20Should%20Exist" title="Fails unless the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Exist</a>
·

<a href="#Variable%20Should%20Not%20Exist" title="Fails if the given variable exists within the current scope.">Variable&nbsp;Should&nbsp;Not&nbsp;Exist</a>
·

<a href="#Wait%20Until%20Keyword%20Succeeds" title="Waits until the specified keyword succeeds or the given timeout expires.">Wait&nbsp;Until&nbsp;Keyword&nbsp;Succeeds</a>


</div>
<h3>Keywords</h3>
<table class="keywords">
  <tbody><tr>
    <th class="kw">Keyword</th>
    <th class="arg">Arguments</th>
    <th class="doc">Documentation</th>
  </tr>
  
  <tr>
    <td class="kw" id="Call Method">Call Method</td>
    <td class="arg">object, method_name, *args</td>
    <td class="doc">Calls the named method of the given object with the provided arguments.<br>
<br>
The possible return value from the method is returned and can be assigned to a variable. Keyword fails both if the object does not have a method with the given name or if executing the method raises an exception.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Call Method</td>
<td>${hashtable}</td>
<td>put</td>
<td>myname</td>
<td>myvalue</td>
</tr>
<tr>
<td>${isempty} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>isEmpty</td>
<td></td>
</tr>
<tr>
<td>Should Not Be True</td>
<td>${isempty}</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${value} =</td>
<td>Call Method</td>
<td>${hashtable}</td>
<td>get</td>
<td>myname</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${value}</td>
<td>myvalue</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Catenate">Catenate</td>
    <td class="arg">*items</td>
    <td class="doc">Catenates the given items together and returns the resulted string.<br>
<br>
By default, items are catenated with spaces, but if the first item contains the string 'SEPARATOR=&lt;sep&gt;', the separator '&lt;sep&gt;' is used. Items are converted into strings when necessary.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${str1} =</td>
<td>Catenate</td>
<td>Hello</td>
<td>world</td>
<td></td>
</tr>
<tr>
<td>${str2} =</td>
<td>Catenate</td>
<td>SEPARATOR=---</td>
<td>Hello</td>
<td>world</td>
</tr>
<tr>
<td>${str3} =</td>
<td>Catenate</td>
<td>SEPARATOR=</td>
<td>Hello</td>
<td>world</td>
</tr>
</tbody></table>
=&gt;<br>
- ${str1} = 'Hello world'<br>
- ${str2} = 'Hello---world'<br>
- ${str3} = 'Helloworld'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Comment">Comment</td>
    <td class="arg">*messages</td>
    <td class="doc">Displays the given messages in the log file as keyword arguments.<br>
<br>
This keyword does nothing with the arguments it receives, but as they are visible in the log, this keyword can be used to display simple messages. Given arguments are ignored so thoroughly that they can even contain non-existing variables. If you are interested about variable values, you can use the <a href="#Log" class="name">Log</a> or <a href="#Log%20Many" class="name">Log Many</a> keywords.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Boolean">Convert To Boolean</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to Boolean true or false.<br>
<br>
Handles strings 'True' and 'False' (case-insensitive) as expected, otherwise returns item's truth value using Python's 'bool' method. For more information about truth values, see <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Integer">Convert To Integer</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to an integer number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To Number">Convert To Number</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a floating point number.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Convert To String">Convert To String</td>
    <td class="arg">item</td>
    <td class="doc">Converts the given item to a Unicode string.<br>
<br>
Uses '__unicode__' or '__str__' method with Python objects and 'toString' with Java objects.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Create List">Create List</td>
    <td class="arg">*items</td>
    <td class="doc">Returns a list containing given items.<br>
<br>
The returned list can be assigned both to ${scalar} and @{list} variables. The earlier can be used e.g. with Java keywords expecting an array as an argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>@{list} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${scalar} =</td>
<td>Create List</td>
<td>a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>${ints} =</td>
<td>Create List</td>
<td>${1}</td>
<td>${2}</td>
<td>${3}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Evaluate">Evaluate</td>
    <td class="arg">expression, modules=None</td>
    <td class="doc">Evaluates the given expression in Python and returns the results.<br>
<br>
<span class="name">modules</span> argument can be used to specify a comma separated list of Python modules to be imported and added to the namespace of the evaluated <span class="name">expression</span>.<br>
<br>
Examples (expecting ${result} is 3.14):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status} =</td>
<td>Evaluate</td>
<td>0 &lt; ${result} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>${down} &nbsp; =</td>
<td>Evaluate</td>
<td>int(${result})</td>
<td></td>
</tr>
<tr>
<td>${up} &nbsp; &nbsp; =</td>
<td>Evaluate</td>
<td>math.ceil(${result})</td>
<td>math</td>
</tr>
<tr>
<td>${random} =</td>
<td>Evaluate</td>
<td>random.randint(0, sys.maxint)</td>
<td>random,sys</td>
</tr>
</tbody></table>
=&gt;<br>
- ${status} = True<br>
- ${down} = 3<br>
- ${up} = 4.0<br>
- ${random} = &lt;random integer&gt;<br>
<br>
Notice that instead of creating complicated expressions, it is recommended to move the logic into a test library.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Fail">Fail</td>
    <td class="arg">msg=None</td>
    <td class="doc">Fails the test immediately with the given (optional) message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Count">Get Count</td>
    <td class="arg">item1, item2</td>
    <td class="doc">Returns and logs how many times <span class="name">item2</span> is found from <span class="name">item1</span>.<br>
<br>
This keyword works with Python strings and lists and all objects that either have 'count' method or can be converted to Python lists.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${count} =</td>
<td>Get Count</td>
<td>${some item}</td>
<td>interesting value</td>
</tr>
<tr>
<td>Should Be True</td>
<td>5 &lt; ${count} &lt; 10</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Length">Get Length</td>
    <td class="arg">item</td>
    <td class="doc">Returns and logs the length of the given item.<br>
<br>
The keyword first tries to get the length with the Python function 'len', which calls the item's '__len__' method internally. If that fails, the keyword tries to call the item's 'length' and 'size' methods directly. The final attempt is trying to get the value of the item's 'length' attribute. If all these attempts are unsuccessful, the keyword fails.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Get Time">Get Time</td>
    <td class="arg">format=timestamp</td>
    <td class="doc">Returns the current time in the requested format.<br>
<br>
How time is returned is determined based on the given <span class="name">format</span> string as follows. Note that all checks are case-insensitive.<br>
<br>
- If <span class="name">format</span> contains the word 'epoch', the time is returned in seconds after the UNIX epoch. The return value is always an integer.<br>
<br>
- If <span class="name">format</span> contains any of the words 'year', 'month', 'day', 'hour', 'min', or 'sec', only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of words in <span class="name">format</span> is not significant. The parts are returned as zero-padded strings (e.g. May -&gt; '05').<br>
<br>
- Otherwise (and by default) the time is returned as a timestamp string in the format '2006-02-24 15:08:31'.<br>
<br>
Examples (expecting the current time is 2006-03-29 15:06:21):<br>
<table class="doc" border="1">
<tbody><tr>
<td>${time} =</td>
<td>Get Time</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${secs} =</td>
<td>Get Time</td>
<td>epoch</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${year} =</td>
<td>Get Time</td>
<td>return year</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${yyyy}</td>
<td>${mm}</td>
<td>${dd} =</td>
<td>Get Time</td>
<td>year,month,day</td>
</tr>
<tr>
<td>@{time} =</td>
<td>Get Time</td>
<td>year month day hour min sec</td>
<td></td>
<td></td>
</tr>
<tr>
<td>${y}</td>
<td>${s} =</td>
<td>Get Time</td>
<td>seconds and year</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${time} = '2006-03-29 15:06:21'<br>
- ${secs} = 1143637581<br>
- ${year} = '2006'<br>
- ${yyyy} = '2006', ${mm} = '03', ${dd} = '29'<br>
- @{time} = ['2006', '03', '29', '15', '06', '21']<br>
- ${y} = '2006'<br>
- ${s} = '21'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Grep">Grep</td>
    <td class="arg">text, pattern, pattern_type=literal string</td>
    <td class="doc"><b>DEPRECATED</b> Use <span class="name">Get Lines Matching XXX</span> keywords from <span class="name">String</span> library instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Library">Import Library</td>
    <td class="arg">name, *args</td>
    <td class="doc">Imports a library with the given name and optional arguments.<br>
<br>
This functionality allows dynamic importing of libraries while tests are running. That may be necessary, if the library itself is dynamic and not yet available when test data is processed. In a normal case, libraries should be imported using the Library setting in the Setting table.<br>
<br>
This keyword supports importing libraries both using library names and physical paths. When path are used, they must be given in absolute format. Starting from 2.0.2 version, forward slashes can be used as path separators in all operating systems. It is possible to use arguments as well as to give a custom name with 'WITH NAME' syntax. For more information about importing libraries, see Robot Framework User Guide.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Library</td>
<td>MyLibrary</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/Library.py</td>
<td>some</td>
<td>args</td>
<td></td>
</tr>
<tr>
<td>Import Library</td>
<td>${CURDIR}/../libs/Lib.java</td>
<td>arg</td>
<td>WITH NAME</td>
<td>JavaLib</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Import Variables">Import Variables</td>
    <td class="arg">path, *args</td>
    <td class="doc">Imports a variable file with the given path and optional arguments.<br>
<br>
Variables imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Variables setting. These variables override possible existing variables with the same names and this functionality can thus be used to import new variables, e.g. for each test in a test suite.<br>
<br>
The given path must be absolute. Starting from 2.0.2 version, forward slashes can be used as path separator regardless the operating system, but on earlier versions ${/} variable must be used instead.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Import Variables</td>
<td>${CURDIR}/variables.py</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Import Variables</td>
<td>${CURDIR}/../vars/env.py</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Length Should Be">Length Should Be</td>
    <td class="arg">item, length, msg=None</td>
    <td class="doc">Verifies that the length of the given item is correct.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log">Log</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc">Logs the given message with the given level.<br>
<br>
Valid levels are TRACE, DEBUG, INFO (default), HTML and WARN.<br>
<br>
HTML level is special because it writes the message into the log file without escaping HTML code from it. For example logging a message like '&lt;img src="image.png"&gt;' with that level creates an image, but with other levels you see just that string. &nbsp;Logging HTML messages should be used with care, because invalid messages can corrupt the whole log file. &nbsp;The actual log level used for HTML messages is INFO.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Many">Log Many</td>
    <td class="arg">*messages</td>
    <td class="doc">Logs the given messages as separate entries with the INFO level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Log Variables">Log Variables</td>
    <td class="arg">level=INFO</td>
    <td class="doc">Logs all variables in the current scope with given log level.</td>
  </tr>
  
  <tr>
    <td class="kw" id="No Operation">No Operation</td>
    <td class="arg"></td>
    <td class="doc">Does absolutely nothing.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Regexp Escape">Regexp Escape</td>
    <td class="arg">*patterns</td>
    <td class="doc">Returns each argument string escaped for use as a regular expression.<br>
<br>
This keyword can be used to escape strings to be used with <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> and <a href="#Should%20Not%20Match%20Regexp" class="name">Should Not Match Regexp</a> keywords.<br>
<br>
Escaping is done with Python's re.escape() function.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${escaped} =</td>
<td>Regexp Escape</td>
<td>${original}</td>
</tr>
<tr>
<td>@{strings} =</td>
<td>Regexp Escape</td>
<td>@{strings}</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Remove Tags">Remove Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Removes given <span class="name">tags</span> from the current test or all tests in a suite.<br>
<br>
Tags can be given exactly or using a pattern where '*' matches anything and '?' matches one character.<br>
<br>
This keyword can affect either one test case or all test cases in a test suite similarly as <a href="#Set%20Tags" class="name">Set Tags</a> keyword.<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Remove Tags</td>
<td>mytag</td>
<td>something-*</td>
<td>?ython</td>
</tr>
</tbody></table>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Repeat Keyword">Repeat Keyword</td>
    <td class="arg">times, name, *args</td>
    <td class="doc">Executes the specified keyword multiple times.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>, and <span class="name">times</span> specifies how many the keyword should be executed. <span class="name">times</span> can be given as an integer or as a string that can be converted to an integer. It can also have postfix 'times' or 'x' (case and space insensitive) to make the expression easier to read.<br>
<br>
If <span class="name">times</span> is zero or negative, the keyword is not executed at all. This keyword fails immediately if any of the execution rounds fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Repeat Keyword</td>
<td>5 times</td>
<td>Goto Previous Page</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Repeat Keyword</td>
<td>${var}</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Replace Variables">Replace Variables</td>
    <td class="arg">text</td>
    <td class="doc">Replaces variables in the given text with their current values.<br>
<br>
If the text contains undefined variables, this keyword fails.<br>
<br>
Example:<br>
<br>
The file 'template.txt' contains 'Hello ${NAME}!' and variable '${NAME}' has the value 'Robot'.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${template} =</td>
<td>Get File</td>
<td>${CURDIR}/template.txt</td>
</tr>
<tr>
<td>${message} =</td>
<td>Replace Variables</td>
<td>${template}</td>
</tr>
<tr>
<td>Should Be Equal</td>
<td>${message}</td>
<td>Hello Robot!</td>
</tr>
</tbody></table>
<br>
If the given <span class="name">text</span> contains only a single variable, its value is returned as-is. Otherwise, and always with Robot Framework 2.0.3 and earlier, this keyword returns a string.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword">Run Keyword</td>
    <td class="arg">name, *args</td>
    <td class="doc">Executes the given keyword with the given arguments.<br>
<br>
Because the name of the keyword to execute is given as an argument, it can be a variable and thus set dynamically, e.g. from a return value of another keyword or from the command line.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Expect Error">Run Keyword And Expect Error</td>
    <td class="arg">expected_error, name, *args</td>
    <td class="doc">Runs the keyword and checks that the expected error occurred.<br>
<br>
The expected error must be given in the same format as in Robot Framework reports. It can be a pattern containing characters '?', which matches to any single character and '*', which matches to any number of any characters. <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
If the expected error occurs, the error message is returned and it can be further processed/tested, if needed. If there is no error, or the error does not match the expected error, this keyword fails.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Run Keyword And Expect Error</td>
<td>My error</td>
<td>Some Keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
<tr>
<td>${msg} =</td>
<td>Run Keyword And Expect Error</td>
<td>*</td>
<td>My KW</td>
<td></td>
</tr>
<tr>
<td>Should Start With</td>
<td>${msg}</td>
<td>Once upon a time in</td>
<td></td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword And Ignore Error">Run Keyword And Ignore Error</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments and ignores possible error.<br>
<br>
This keyword returns two values, so that the first is either 'PASS' or 'FAIL', depending on the status of the executed keyword. The second value is either the return value of the keyword or the received error message.<br>
<br>
The keyword name and arguments work as in <a href="#Run%20Keyword" class="name">Run Keyword</a>. See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for a usage example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If">Run Keyword If</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is true.<br>
<br>
The given <span class="name">condition</span> is evaluated similarly as with <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword, and <span class="name">name</span> and <span class="name">*args</span> have same semantics as with <a href="#Run%20Keyword" class="name">Run Keyword</a>.<br>
<br>
Example, a simple if/else construct:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${status}</td>
<td>${value} =</td>
<td>Run Keyword And Ignore Error</td>
<td>My Keyword</td>
</tr>
<tr>
<td>Run Keyword If</td>
<td>'${status}' == 'PASS'</td>
<td>Some Action</td>
<td></td>
</tr>
<tr>
<td>Run Keyword Unless</td>
<td>'${status}' == 'PASS'</td>
<td>Another Action</td>
<td></td>
</tr>
</tbody></table>
<br>
In this example, only either 'Some Action' or 'Another Action' is executed, based on the status of 'My Keyword'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Critical Tests Passed">Run Keyword If All Critical Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all critical tests passed.<br>
<br>
This keyword can only be used in suite teardown. Trying to use it in any other place will result in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If All Tests Passed">Run Keyword If All Tests Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if all tests passed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Critical Tests Failed">Run Keyword If Any Critical Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if any critical tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Any Tests Failed">Run Keyword If Any Tests Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if one or more tests failed.<br>
<br>
This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Failed">Run Keyword If Test Failed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test failed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword If Test Passed">Run Keyword If Test Passed</td>
    <td class="arg">name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if the test passed.<br>
<br>
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.<br>
<br>
Otherwise, this keyword works exactly like <a href="#Run%20Keyword" class="name">Run Keyword</a>, see its documentation for more details.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Run Keyword Unless">Run Keyword Unless</td>
    <td class="arg">condition, name, *args</td>
    <td class="doc">Runs the given keyword with the given arguments, if <span class="name">condition</span> is false.<br>
<br>
See <a href="#Run%20Keyword%20If" class="name">Run Keyword If</a> for more information and an example.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Global Variable">Set Global Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available globally in all tests and suites.<br>
<br>
Variables set with this keyword are globally available in all test cases and suites executed after setting them. Setting variables with this keyword thus has the same effect as creating from the command line using the options '--variable' or '--variablefile'. Because this keyword can change variables everywhere, it should be used with care.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Library Search Order">Set Library Search Order</td>
    <td class="arg">*libraries</td>
    <td class="doc">Sets the resolution order to use when a name matches multiple keywords.<br>
<br>
The library search order is used to resolve conflicts when a keyword name in the test data matches multiple keywords. The first library containing the keyword is selected and that keyword implementation used. If keyword is not found from any library, or the library search order is not set, executing the specified keyword fails.<br>
<br>
When this keyword is used, there is no need to use the long <span class="name">LibraryName.Keyword Name</span> notation. &nbsp;For example, instead of having<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>MyLibrary.Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>MyLibrary.Another Keyword</td>
<td></td>
</tr>
<tr>
<td>MyLibrary.Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
you can have<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Library Search Order</td>
<td>MyLibrary</td>
</tr>
<tr>
<td>Keyword</td>
<td>arg</td>
</tr>
<tr>
<td>Another Keyword</td>
<td></td>
</tr>
<tr>
<td>Keyword</td>
<td>xxx</td>
</tr>
</tbody></table>
<br>
The library search order is valid only in the suite where this keyword is used in. The old order is returned and can be used to reset the search order later.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Log Level">Set Log Level</td>
    <td class="arg">level</td>
    <td class="doc">Sets the log threshold to the specified level and returns the old level.<br>
<br>
Messages below the level will not logged. The default logging level is INFO, but it can be overridden with the command line option '--loglevel'.<br>
<br>
The available levels: TRACE, DEBUG, INFO (default), WARN and NONE (no logging).</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Suite Variable">Set Suite Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current suite.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test suite. Setting variables with this keyword thus has the same effect as creating them using the Variable table in the test data file or importing them from variable files. Other test suites, including possible child test suites, will not see variables set with this keyword.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
If a variable already exists within the new scope, its value will be overwritten. Otherwise a new variable is created. If a variable already exists within the current scope, the value can be left empty and the variable within the new scope gets the value within the current scope.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Set Suite Variable</td>
<td>${GREET}</td>
<td>Hello, world!</td>
</tr>
<tr>
<td>${ID} =</td>
<td>Get ID</td>
<td></td>
</tr>
<tr>
<td>Set Suite Variable</td>
<td>${ID}</td>
<td></td>
</tr>
</tbody></table>
<br>
See also <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a> and <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Tags">Set Tags</td>
    <td class="arg">*tags</td>
    <td class="doc">Adds given <span class="name">tags</span> for the current test or all tests in a suite.<br>
<br>
When this keyword is used inside a test case, that test gets the specified tags and other tests are not affected.<br>
<br>
If this keyword is used in a suite setup, all test cases in that suite, recursively, gets the given tags. It is a failure to use this keyword in a suite teardown.<br>
<br>
See <a href="#Remove%20Tags" class="name">Remove Tags</a> for another keyword to modify tags at test execution time.<br>
<br>
New in Robot Framework version 2.0.3.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Test Variable">Set Test Variable</td>
    <td class="arg">name, *values</td>
    <td class="doc">Makes a variable available everywhere within the scope of the current test.<br>
<br>
Variables set with this keyword are available everywhere within the scope of the currently executed test case. For example, if you set a variable in a user keyword, it is available both in the test case level and also in all other user keywords used in the current test. Other test cases will not see variables set with this keyword.<br>
<br>
See <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for more information and examples.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable">Set Variable</td>
    <td class="arg">*values</td>
    <td class="doc">Returns the given argument which can then be assigned to a variable.<br>
<br>
This keyword is mainly used for setting scalar variables. Additionally it can be used for converting a scalar variable containing a list to a list variable or to multiple scalar variables.<br>
<br>
Using this keyword with more (or less) than one value has been deprecated in Robot Framework 2.1 and that usage will be removed in 2.2 version.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>${hi} =</td>
<td>Set Variable</td>
<td>Hello, world!</td>
<td></td>
</tr>
<tr>
<td>${hi2} =</td>
<td>Set Variable</td>
<td>I said: ${hi}</td>
<td></td>
</tr>
<tr>
<td>@{list} =</td>
<td>Set Variable</td>
<td>${list with some items}</td>
<td></td>
</tr>
<tr>
<td>${item1}</td>
<td>${item2} =</td>
<td>Set Variable</td>
<td>${list with 2 items}</td>
</tr>
</tbody></table>
<br>
Variables created with this keyword are available only in the scope where they are created. See <a href="#Set%20Global%20Variable" class="name">Set Global Variable</a>, <a href="#Set%20Test%20Variable" class="name">Set Test Variable</a> and <a href="#Set%20Suite%20Variable" class="name">Set Suite Variable</a> for information on how to set variables so that they are available also in a larger scope.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Set Variable If">Set Variable If</td>
    <td class="arg">condition, *values</td>
    <td class="doc">Sets variable based on the given condition.<br>
<br>
The basic usage is giving a condition and two values. The given condition is first evaluated the same way as with the <a href="#Should%20Be%20True" class="name">Should Be True</a> keyword. If the condition is true, then the first value is returned, and otherwise the second value is returned. The second value can also be omitted, in which case it has a default value None. This usage is illustrated in the examples below, where ${rc} is assumed to be zero.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var1} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
<td>nonzero</td>
</tr>
<tr>
<td>${var2} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>value1</td>
<td>value2</td>
</tr>
<tr>
<td>${var3} =</td>
<td>Set Variable If</td>
<td>${rc} &gt; 0</td>
<td>whatever</td>
<td></td>
</tr>
</tbody></table>
=&gt;<br>
- ${var1} = 'zero'<br>
- ${var2} = 'value2'<br>
- ${var3} = None<br>
<br>
Starting from Robot Framework 2.0.2 it is also possible to have 'Else If' support by replacing the second value with another condition, and having two new values after it. If the first condition is not true, the second is evaluated and one of the values after it is returned based on its truth value. This can be continued by adding more conditions without a limit.<br>
<br>
<table class="doc" border="1">
<tbody><tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td>${rc} == 0</td>
<td>zero</td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 0</td>
<td>greater than zero</td>
<td>less then zero</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>${var} =</td>
<td>Set Variable If</td>
<td></td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 0</td>
<td>zero</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 1</td>
<td>one</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} == 2</td>
<td>two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &gt; 2</td>
<td>greater than two</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>${rc} &lt; 0</td>
<td>less than zero</td>
<td></td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Empty">Should Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal">Should Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are unequal.<br>
<br>
- If <span class="name">msg</span> is not given, the error message is 'first != second'.<br>
- If <span class="name">msg</span> is given and <span class="name">values</span> is either Boolean False or the string 'False' or 'No Values', the error message is simply <span class="name">msg</span>.<br>
- Otherwise the error message is '<span class="name">msg</span>: <span class="name">first</span> != <span class="name">second</span>'.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Integers">Should Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Numbers">Should Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be Equal As Strings">Should Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are unequal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Be True">Should Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is not true.<br>
<br>
If <span class="name">condition</span> is a string (e.g. '${rc} &lt; 10'), it is evaluated as a Python expression using the built-in 'eval' function and the keyword status is decided based on the result. If a non-string item is given, the status is got directly from its truth value as explained at <a href="http://docs.python.org/lib/truth.html">http://docs.python.org/lib/truth.html</a>.<br>
<br>
The default error message ('&lt;condition&gt; should be true') is not very informative, but it can be overridden with the <span class="name">msg</span> argument.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Be True</td>
<td>${rc} &lt; 10</td>
<td></td>
</tr>
<tr>
<td>Should Be True</td>
<td>'${status}' == 'PASS'</td>
<td># Strings must be quoted</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${number}</td>
<td># Passes if ${number} is not zero</td>
</tr>
<tr>
<td>Should Be True</td>
<td>${list}</td>
<td># Passes if ${list} is not empty</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain">Should Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain</td>
<td>${output}</td>
<td>PASS</td>
</tr>
<tr>
<td>Should Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Contain X Times">Should Contain X Times</td>
    <td class="arg">item1, item2, count, msg=None</td>
    <td class="doc">Fails if <span class="name">item1</span> does not contain <span class="name">item2</span> <span class="name">count</span> times.<br>
<br>
Works with strings, lists and all objects that <a href="#Get%20Count" class="name">Get Count</a> works with. The default error message can be overridden with <span class="name">msg</span> and the actual count is always logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Contain X Times</td>
<td>${output}</td>
<td>hello</td>
<td>2</td>
</tr>
<tr>
<td>Should Contain X Times</td>
<td>${some list}</td>
<td>value</td>
<td>3</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should End With">Should End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not end with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match">Should Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails unless the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern, '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Match Regexp">Should Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> does not match <span class="name">pattern</span> as a regular expression.<br>
<br>
Regular expression check is done using the Python 're' module, which has a pattern syntax derived from Perl, and thus also very similar to the one in Java. See the following documents for more details about regular expressions in general and Python implementation in particular.<br>
<br>
* <a href="http://docs.python.org/lib/module-re.html">http://docs.python.org/lib/module-re.html</a><br>
* <a href="http://www.amk.ca/python/howto/regex/">http://www.amk.ca/python/howto/regex/</a><br>
<br>
Things to note about the regexp syntax in Robot Framework test data:<br>
<br>
1) Backslash is an escape character in the test data, and possible backslashes in the pattern must thus be escaped with another backslash (e.g. '\\d\\w+').<br>
<br>
2) Strings that may contain special characters, but should be handled as literal strings, can be escaped with the <a href="#Regexp%20Escape" class="name">Regexp Escape</a> keyword.<br>
<br>
3) The given pattern does not need to match the whole string. For example, the pattern 'ello' matches the string 'Hello world!'. If a full match is needed, the '^' and '$' characters can be used to denote the beginning and end of the string, respectively. For example, '^ello$' only matches the exact string 'ello'.<br>
<br>
4) Possible flags altering how the expression is parsed (e.g. re.IGNORECASE, re.MULTILINE) can be set by prefixing the pattern with the '(?iLmsux)' group (e.g. '(?im)pattern'). The available flags are 'IGNORECASE': 'i', 'MULTILINE': 'm', 'DOTALL': 's', 'VERBOSE': 'x', 'UNICODE': 'u', and 'LOCALE': 'L'.<br>
<br>
If this keyword passes, it returns the portion of the string that matched the pattern. Additionally, the possible captured groups are returned.<br>
<br>
See the <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> keyword for an explanation on how to override the default error message with the <span class="name">msg</span> and <span class="name">values</span> arguments.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>\\d{6}</td>
<td># Output contains six numbers</td>
</tr>
<tr>
<td>Should Match Regexp</td>
<td>${output}</td>
<td>^\\d{6}$</td>
<td># Six numbers and nothing more</td>
</tr>
<tr>
<td>${ret} =</td>
<td>Should Match Regexp</td>
<td>Foo: 42</td>
<td>(?i)foo: \\d+</td>
</tr>
<tr>
<td>${match}</td>
<td>${group1}</td>
<td>${group2} =</td>
<td></td>
</tr>
<tr>
<td>...</td>
<td>Should Match Regexp</td>
<td>Bar: 43</td>
<td>(Foo|Bar): (\\d+)</td>
</tr>
</tbody></table>
=&gt;<br>
- ${ret} = 'Foo: 42'<br>
- ${match} = 'Bar: 43'<br>
- ${group1} = 'Bar'<br>
- ${group2} = '43'</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Empty">Should Not Be Empty</td>
    <td class="arg">item, msg=None</td>
    <td class="doc">Verifies that the given item is not empty.<br>
<br>
The length of the item is got using the <a href="#Get%20Length" class="name">Get Length</a> keyword. The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal">Should Not Be Equal</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if the given objects are equal.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Integers">Should Not Be Equal As Integers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to integers.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Numbers">Should Not Be Equal As Numbers</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to real numbers.<br>
<br>
Starting from Robot Framework 2.0.2, the check for equality is done using six decimal places.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be Equal As Strings">Should Not Be Equal As Strings</td>
    <td class="arg">first, second, msg=None, values=True</td>
    <td class="doc">Fails if objects are equal after converting them to strings.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Be True">Should Not Be True</td>
    <td class="arg">condition, msg=None</td>
    <td class="doc">Fails if the given condition is true.<br>
<br>
See <a href="#Should%20Be%20True" class="name">Should Be True</a> for details about how <span class="name">condition</span> is evaluated and how <span class="name">msg</span> can be used to override the default error message.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Contain">Should Not Contain</td>
    <td class="arg">item1, item2, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">item1</span> contains <span class="name">item2</span> one or more times.<br>
<br>
Works with strings, lists, and anything that supports Python's 'in' keyword. See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Should Not Contain</td>
<td>${output}</td>
<td>FAILED</td>
</tr>
<tr>
<td>Should Not Contain</td>
<td>${some_list}</td>
<td>value</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not End With">Should Not End With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> ends with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match">Should Not Match</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if the given <span class="name">string</span> matches the given <span class="name">pattern</span>.<br>
<br>
Pattern matching is similar as matching files in a shell, and it is always case-sensitive. In the pattern '*' matches to anything and '?' matches to any single character.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Match Regexp">Should Not Match Regexp</td>
    <td class="arg">string, pattern, msg=None, values=True</td>
    <td class="doc">Fails if <span class="name">string</span> matches <span class="name">pattern</span> as a regular expression.<br>
<br>
See <a href="#Should%20Match%20Regexp" class="name">Should Match Regexp</a> for more information about arguments.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Not Start With">Should Not Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> starts with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Should Start With">Should Start With</td>
    <td class="arg">str1, str2, msg=None, values=True</td>
    <td class="doc">Fails if the string <span class="name">str1</span> does not start with the string <span class="name">str2</span>.<br>
<br>
See <a href="#Should%20Be%20Equal" class="name">Should Be Equal</a> for an explanation on how to override the default error message with <span class="name">msg</span> and <span class="name">values</span>.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Sleep">Sleep</td>
    <td class="arg">time, reason=None</td>
    <td class="doc">Pauses the test executed for the given time.<br>
<br>
<span class="name">time</span> may be either a number or a time string. Time strings are in a format such as '1 day 2 hours 3 minutes 4 seconds 5milliseconds' or '1d 2h 3m 4s 5ms', and they are fully explained in an appendix of Robot Framework User Guide. Optional <span class="name">reason</span> can be used to explain why sleeping is necessary. Both the time slept and the reason are logged.<br>
<br>
Examples:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Sleep</td>
<td>42</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>1.5</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>2 minutes 10 seconds</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td>10s</td>
<td>Wait for a reply</td>
</tr>
</tbody></table>
</td>
  </tr>
  
  <tr>
    <td class="kw" id="Syslog">Syslog</td>
    <td class="arg">message, level=INFO</td>
    <td class="doc"><b>DEPRECATED</b> Use <a href="#Log" class="name">Log</a> keyword with WARN level instead. This keyword will be removed in Robot Framework 2.2.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Exist">Variable Should Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails unless the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Variable Should Not Exist">Variable Should Not Exist</td>
    <td class="arg">name, msg=None</td>
    <td class="doc">Fails if the given variable exists within the current scope.<br>
<br>
The name of the variable can be given either as a normal variable name (e.g. ${NAME}) or in escaped format (e.g. \${NAME}). Notice that the former works only in Robot Framework 2.1 and newer.<br>
<br>
The default error message can be overridden with the <span class="name">msg</span> argument.</td>
  </tr>
  
  <tr>
    <td class="kw" id="Wait Until Keyword Succeeds">Wait Until Keyword Succeeds</td>
    <td class="arg">timeout, retry_interval, name, *args</td>
    <td class="doc">Waits until the specified keyword succeeds or the given timeout expires.<br>
<br>
<span class="name">name</span> and <span class="name">args</span> define the keyword that is executed similarly as with <a href="#Run%20Keyword" class="name">Run Keyword</a>. If the specified keyword does not succeed within <span class="name">timeout</span>, this keyword fails. <span class="name">retry_interval</span> is the time to wait before trying to run the keyword again after the previous run has failed.<br>
<br>
Both <span class="name">timeout</span> and <span class="name">retry_interval</span> must be given in Robot Framework's time format (e.g. '1 minute', '2 min 3 s', '4.5').<br>
<br>
Example:<br>
<table class="doc" border="1">
<tbody><tr>
<td>Wait Until Keyword Succeeds</td>
<td>2 min</td>
<td>5 sec</td>
<td>My keyword</td>
<td>arg1</td>
<td>arg2</td>
</tr>
</tbody></table>
</td>
  </tr>
  
</tbody></table>
<div class="hr"><hr></div>
<p class="info">Altogether 72 keywords.</p>

  </div>
  <div id="footer">
    <p>
      <a href="http://code.google.com/p/rfdoc" title="RFDoc project pages">
        RFDoc
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://robotframework.org" title="Robot Framework project pages">
        Robot Framework
      </a>
      &nbsp; &nbsp; | &nbsp; &nbsp;
      <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool" title="Tool for generating library and resource file documentations">
        libdoc.py
      </a>
    </p>
  </div>
</body> on session 099f5bd38f4248309d5a9148e18ef011
11:59:25.244 INFO - Command request: testComplete[, ] on session 099f5bd38f4248309d5a9148e18ef011
11:59:25.244 INFO - Killing Firefox...
11:59:25.275 INFO - Got result: OK on session 099f5bd38f4248309d5a9148e18ef011
11:59:25.927 INFO - Command request: shutDownSeleniumServer[, ] on session null
11:59:25.927 INFO - Shutdown command received
11:59:25.928 INFO - initiating shutdown
11:59:25.928 INFO - Got result: OK on session null
